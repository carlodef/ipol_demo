/*
 * @license
 * Copyright (c) 2011-2014, Markus Schuetz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
function load_binary_resource(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.overrideMimeType("text/plain; charset=x-user-defined"),t.send(null),200!==t.status&&0!==t.status?(console.log("req.status: '"+t.status+"'"),console.log("req.readyState: '"+t.readyState+"'"),""):t.responseText}function pathExists(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),200!==t.status?!1:!0}function loadBinaryResourceIntoArrayBuffer(e){var t=new XMLHttpRequest;if(t.open("GET",e,!1),t.responseType="arraybuffer",t.overrideMimeType("text/plain; charset=x-user-defined"),t.send(null),4===t.readyState){if(200===t.status||0===t.status){var r=t.response;return r}alert("Failed to load file! HTTP status: "+t.status)}return null}function getUrlVars(){{var e={};window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(t,r,n){e[r]=n})}return e}function addCommas(e){e+="",x=e.split("."),x1=x[0],x2=x.length>1?"."+x[1]:"";for(var t=/(\d+)(\d{3})/;t.test(x1);)x1=x1.replace(t,"$1,$2");return x1+x2}function relMouseCoords(e,t){var r=0,n=0,i=0,a=0,o=t;do r+=o.offsetLeft-o.scrollLeft,n+=o.offsetTop-o.scrollTop;while(o=o.offsetParent);return i=e.pageX-r,a=e.pageY-n,{x:i,y:a}}function numbersonly(e,t,r){var n,i;if(window.event)n=window.event.keyCode;else{if(!t)return!0;n=t.which}return i=String.fromCharCode(n),null==n||0===n||8===n||9===n||13===n||27===n?!0:"0123456789".indexOf(i)>-1?!0:r&&"."===i?(e.form.elements[r].focus(),!1):!1}function mouseIsInCanvas(e){var t=Potree.canvas.getBoundingClientRect(),r=e.pageX,n=e.pageY;return t.left<=r&&r<=t.right&&t.top<=n&&n<=t.bottom}function currentPath(){var e=window.location.pathname,t=e.substring(0,e.lastIndexOf("/"));return window.location.host+t}function absolutePath(e){var t=document.createElement("a");return t.href=e,t.protocol+"//"+t.host+t.pathname+t.search+t.hash}function loadWebWorkerSource(e){return null!=Potree.webWorkerSources?Potree.webWorkerSources[e]:load_binary_resource(e)}function createWebWorker(e){var t=null;if(Potree.singleSource){var r,n=Potree.webWorkerSources[e];try{r=new Blob([n],{type:"application/javascript"})}catch(i){window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder,r=new BlobBuilder,r.append(response),r=r.getBlob()}t=new Worker(URL.createObjectURL(r))}else t=new Worker(e);return t}function KeyListener(){}function KeyCodes(){}function MouseListener(){}function Mouse(){}function TextureManager(){}function Texture(){this.glid=gl.createTexture(),gl.bindTexture(gl.TEXTURE_2D,this.glid),gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,!1),gl.bindTexture(gl.TEXTURE_2D,null)}function MaterialManager(){}function Shader(e,t,r){arguments[0]!==inheriting&&(null==e&&(e="Shader_"+Shader.count),this.vertexShaderName=null,this.fragmentShaderName=null,this.program=null,this.name=e,this.setVertexShaderName(t),this.setFragmentShaderName(r),this.relink(),this.initUniforms(),this.initAttributes(),ShaderManager.addShader(this),Shader.count++)}function ShaderAttribute(){}function Plane(e,t){this.distance=e,this.normal=t}function Frustum(){this.nearPlane=null,this.farPlane=null,this.leftPlane=null,this.rightPlane=null,this.topPlane=null,this.bottomPlane=null,this.pNearUL=null,this.pNearUR=null,this.pNearLL=null,this.pNearLR=null,this.pFarUL=null,this.pFarUR=null,this.pFarLL=null,this.pFarLR=null,this.planes=new Array}function Renderer(e,t){this.fboColor=t,this.fboDepthAsRGBA=null,this.scene=e,this.bgColor=[0,0,0,1],this._viewport=[0,0,0,0],this.fboWorldPosAt=null,this.worldPosCallbackQueue=new Array}function AABB(){this.points=24,this.color=[1,0,0,1],this.version=0,this.min=V3.$(0,0,0),this.max=V3.$(0,0,0),this.center=M4x4.$(),this.radius=null,this.vbo=null,this.transform=M4x4.I,this.p0=null,this.p1=null,this.p2=null,this.p3=null,this.p4=null,this.p5=null,this.p6=null,this.p7=null,this.objectSpaceMin=V3.$(0,0,0),this.objectSpaceMax=V3.$(0,0,0),this.tp0=V3.$(0,0,0),this.tp1=V3.$(0,0,0),this.tp2=V3.$(0,0,0),this.tp3=V3.$(0,0,0),this.tp4=V3.$(0,0,0),this.tp5=V3.$(0,0,0),this.tp6=V3.$(0,0,0),this.tp7=V3.$(0,0,0)}function SceneNode(e,t){arguments[0]!==inheriting&&(this._scene=null,this.name=e,this.parent=t,this.children=new Object,this.aabb=null,this._visible=!0,this._globalPosition=V3.$(0,0,0),this.age=0,this._transform=M4x4.I,null!=this.parent&&(this.parent.addChild(this),this.scene=t.scene),this.tmpMatrix1=M4x4.$(),this.tmpMatrix2=M4x4.$(),this.tmpMatrix3=M4x4.$())}function Camera(e){SceneNode.call(this,e),this._nearClipPlane=.1,this._farClipPlane=250,this._fieldOfView=60,this._aspectRatio=1,this._viewMatrix=null,this._projectionMatrix=null,this.updateViewMatrix(),this.updateProjectionMatrix()}function Scene(e){this.name=e,this.rootNode=new SceneNode("root"),this.rootNode.scene=this,this.cameras=new Object,this.cameras["default"]=new Camera("default"),this.cameras["default"].scene=this,this.lights=new Object,this.activeCamera=this.cameras["default"]}function MeshNode(e,t,r){SceneNode.call(this,e,r),this.mesh=t}function LightType(){}function Light(e,t){SceneNode.call(this,e,t),this.type=LightType.OMNI,this.colour=[1,1,1],this.castShadows=!1}function Sphere(e,t){SceneNode.call(this,e,t);var r=12;this._mesh=null,this.tesselation=r}function Mesh(e){this.name=e,this.subMeshes=new Array,this.setType(MeshType.TRIANGLES),this._material=null,this.primitiveSize=1}function SubMesh(e){this.mesh=e,this.vbos=new Object,this.ibo=null,this.vertexCount=0,this.indices=null,this._material=null}function CamHandler(){}function FreeFlightCamHandler(e){this.camera=e,this.velocity=[0,0,0],this.targetVelocity=[0,0,0],this.targetVelocityMultiplicator=20,this.x=0,this.y=0,this.speedMultiplier=.2,this.qualityToggle=0}function OrbitCamHandler(e){this.camera=e,this.rotateSpeed=.2,this.zoomSpeed=.2,this.pivot=V3.$(0,0,0)}function EarthCamHandler(e){this.camera=e,this.velocity=[0,0,0],this.targetVelocity=[0,0,0],this.targetVelocityMultiplicator=20,this.moveSpeed=.5,this.zoomSpeed=.2,this.rotateSpeed=.2,this.pivot=V3.$(0,0,0),this.fetchingWorldPos=!1,this.transformAtNavigationStart=null,this.originNavigationStart=null}function Framebuffer(e,t){arguments[0]!==inheriting&&("system"===arguments[0]?(this.framebuffer=null,this.initOtherStuff()):(this.initBufferStuff(e,t),this.initOtherStuff()))}function FramebufferFloat32(e,t){Framebuffer.call(this,e,t)}function ShaderManager(){}function MeshUtils(){}function PointcloudOctreeSceneNode(e,t){SceneNode.call(this,name,t),this.mno=e}function PointCloudSceneNode(e,t,r){SceneNode.call(this,e,t),this.pointCloud=r,this.material=null===MaterialManager.getMaterial("pointCloud")?new PointCloudMaterial("pointCloud"):MaterialManager.getMaterial("pointCloud");var n=r.pointAttributes;this.material.illuminationMode=n.hasColors()?IlluminationMode.FLAT:n.hasNormals()?IlluminationMode.PHONG:IlluminationMode.POSITION,this.material.renderMode=PointCloudRenderMode.WEIGHTED_CIRCLE}function PointCloud(e,t){this.name=e,this.vbo=null,this.aabb=null,this.pointCloudRoot=!1,this.pointAttributes=t,this.size=0}function PointcloudOctreeNode(e,t){this.name=e,this.id=t.octreeDir+"/"+e,this.pointCloud=null,this.level=e.length-1,this.children=new Object,this.age=0,this.poc=t,this.isLoading=!1,this.points=0,this.opacity=0,this.fade=0,this._aabb=null,null==PointcloudOctreeNode.lruNodes&&(PointcloudOctreeNode.lruNodes=new LRU)}function POCRenderQueue(){this.byteSize=0,this.nodes=new Object,this.nodeList=new Array,this.length=0,this.points=0}function PointcloudOctree(){this.rootNode=null,this.pointAttributes=null,this.maxRenderingNodes=500,this.nodesRenderedThisFrame=0,this.octreeDir=null,this.loadQueue=new Array,null!==MaterialManager.getMaterial("pointCloud")&&(this.material=MaterialManager.getMaterial("pointCloud")),this.renderQueue=new POCRenderQueue,this.tmpStack=new Array,this.aabbVersion=1,this.minDepth=1,this.nodesBeeingLoaded=new Array,this.loadingNodesLimit=10}function Material(e){arguments[0]!==inheriting&&(null==e&&(e="Material_"+Material.count),this.name=e,MaterialManager.addMaterial(this),Material.count++)}function WeightedPointSizeMaterial(e){Material.call(this,e),this.shader=new Shader(e+"_color","pointSize.vs","colouredPoint.fs"),this.posShader=new Shader(e+"_position","weightedPoints/weightedPointsPosition.vs","weightedPoints/weightedPointsPosition.fs"),this.rgbaDepthShader=new Shader(e+"_depthRGBA","weightedPoints/weightedPointsDepthAsRGBA.vs","weightedPoints/weightedPointsDepthAsRGBA.fs"),this.pointSize=.3}function FixedPointSizeMaterial(e){Material.call(this,e),this.shader=new Shader(e,"fixedPointSize.vs","colouredPoint.fs"),this.pointSize=1}function PointCloudMaterial(e){Material.call(this,e),this.renderMode=PointCloudRenderMode.WEIGHTED_CIRCLE,this.filteredMaterial=FilteredSplatsMaterial.isSupported()?new FilteredSplatsMaterial(e+"_filtered"):null,this.weightedMaterial=new WeightedPointSizeMaterial(e+"_weighted"),this.fixedMaterial=new FixedPointSizeMaterial(e+"_fixed"),this.gaussFillMaterial=GaussFillMaterial.isSupported()?new GaussFillMaterial(e+"_fill"):null,this.activeMaterial=this.weightedMaterial,this.pointSize=.2,this.blendDepth=.1,this.illuminationMode=IlluminationMode.FLAT}function FlatMaterial(e,t){Material.call(this,e),this.flatShader=new Shader(e,"flatShader.vs","flatShader.fs"),this.color=null!=t?t:[1,0,0,1]}function PhongMaterial(e,t){Material.call(this,e),this.flatShader=new Shader(e,"phong.vs","phong.fs"),this.color=null!=t?t:[1,0,0,1]}function FilteredSplatsMaterial(e){if(!FilteredSplatsMaterial.isSupported())throw new Error("FilteredSplatsMaterial is not supported on your system. OES_texture_float extension is not available.");Material.call(this,e),this.depthShader=new Shader(e+"_depth","filteredSplats/filteredSplatsDepthPass.vs","filteredSplats/filteredSplatsDepthPass.fs"),this.normalShader=new Shader(e+"_filtered_normal","filteredSplats/filteredSplatsAttributePass.vs","filteredSplats/filteredSplatsNormalAttributePass.fs"),this.colorShader=new Shader(e+"_filtered_color","filteredSplats/filteredSplatsAttributePass.vs","filteredSplats/filteredSplatsColorAttributePass.fs"),this.normalizationShader=new Shader(e+"normalization","drawTexture.vs","filteredSplats/filteredSplatsShadingPass.fs"),this.depthFBO=new FramebufferFloat32(Potree.canvas.width,Potree.canvas.height),this.normalFBO=new FramebufferFloat32(Potree.canvas.width,Potree.canvas.height),this.colorFBO=new FramebufferFloat32(Potree.canvas.width,Potree.canvas.height),this.illuminationMode=IlluminationMode.PHONG,this.pointSize=1,this.blendDepth=.1}function GaussFillMaterial(e){if(!GaussFillMaterial.isSupported())throw new Error("GaussFillMaterial is not supported on your system. OES_texture_float extension is not available.");Material.call(this,e),this.depthShader=new Shader(e+"_depth","gaussFill/gaussFillDepthPass.vs","gaussFill/gaussFillDepthPass.fs"),this.colorShader=new Shader(e+"_filtered_color","gaussFill/gaussFillPointsPass.vs","gaussFill/gaussFillPointsPass.fs"),this.spreadXShader=new Shader(e+"_spreadX","drawTexture.vs","gaussFill/gaussFillSpreadXPass.fs"),this.spreadYShader=new Shader(e+"_spreadY","drawTexture.vs","gaussFill/gaussFillSpreadYPass.fs"),this.normalizationShader=new Shader(e+"normalization","drawTexture.vs","gaussFill/gaussFillNormalizationPass.fs"),this.depthFBO=new Framebuffer(Potree.canvas.width,Potree.canvas.height),this.colorFBO=new Framebuffer(Potree.canvas.width,Potree.canvas.height),this.spreadXFBO=new FramebufferFloat32(Potree.canvas.width,Potree.canvas.height),this.spreadYFBO=new FramebufferFloat32(Potree.canvas.width,Potree.canvas.height),this.illuminationMode=IlluminationMode.PHONG,this.pointSize=1,this.blendDepth=.1,this.gaussKernel=[.0216149,.0439554,.0778778,.118718,.153857,.167953,.153857,.118718,.0778778,.0439554,.0216149];for(var t=0;t<this.gaussKernel.length;t++)this.gaussKernel[t]=Math.pow(this.gaussKernel[t]+.1,20)}function POCLoader(){}function PointAttributeNames(){}function PointAttribute(e,t,r){this.name=e,this.type=t,this.numElements=r,this.byteSize=this.numElements*this.type.size}function PointAttributes(e){if(this.attributes=new Array,this.byteSize=0,this.size=0,null!=e)for(var t in e){var r=e[t];this.attributes.push(r),this.byteSize+=r.byteSize,this.size++}}function PlyFileType(){}function PlyProperty(e,t){this.name=e,this.type=t}function PlyPropertyDataType(e,t){this.name=e,this.size=t}function PlyElement(e){this.name=e,this.properties=new Array,this.size=0}function PlyHeader(){this.type=null,this.byteSize=0,this.elements=new Array}function PlyFile(e){this.buffer=e,this.header=new PlyHeader}function PlyLoaderListener(){}function PlyLoader(){}function LRUItem(e){this.previous=null,this.next=null,this.node=e}function LRU(){this.first=null,this.last=null,this.items={},this.elements=0,this.byteSize=0}function Potree(){this.camHandler=null}Array=Array,Array.prototype.remove=function(e){for(var t=null;-1!==(t=this.indexOf(e));)this.splice(t,1)},Array.prototype.contains=function(e){var t=this.indexOf(e);return-1!==t},Object.defineProperties(Array.prototype,{x:{get:function(){return this[0]}},y:{get:function(){return this[1]}},z:{get:function(){return this[2]}},w:{get:function(){return this[3]}},r:{get:function(){return this[0]}},g:{get:function(){return this[1]}},b:{get:function(){return this[2]}},a:{get:function(){return this[3]}}}),V3=V3,M4x4=M4x4,V3.transform=function(e,t,r){void 0===r&&(r=new MJS_FLOAT_ARRAY_TYPE(3)),r[0]=e[0]*t[0]+e[1]*t[4]+e[2]*t[8]+t[12],r[1]=e[0]*t[1]+e[1]*t[5]+e[2]*t[9]+t[13],r[2]=e[0]*t[2]+e[1]*t[6]+e[2]*t[10]+t[14];var n=e[0]*t[3]+e[1]*t[7]+e[2]*t[11]+t[15];return r[0]=r[0]/n,r[1]=r[1]/n,r[2]=r[2]/n,r},V3.rTransform=function(e,t,r){void 0===r&&(r=new MJS_FLOAT_ARRAY_TYPE(3)),r[0]=e[0]*t[0]+e[1]*t[4]+e[2]*t[8],r[1]=e[0]*t[1]+e[1]*t[5]+e[2]*t[9],r[2]=e[0]*t[2]+e[1]*t[6]+e[2]*t[10];var n=e[0]*t[3]+e[1]*t[7]+e[2]*t[11]+t[15];return r[0]=r[0]/n,r[1]=r[1]/n,r[2]=r[2]/n,r},M4x4.inverseOrthonormal=function(e,t){void 0===t&&(t=new MJS_FLOAT_ARRAY_TYPE(16)),M4x4.transpose(e,t);var r=[e[12],e[13],e[14]];return t[3]=t[7]=t[11]=0,t[12]=-V3.dot([t[0],t[4],t[8]],r),t[13]=-V3.dot([t[1],t[5],t[9]],r),t[14]=-V3.dot([t[2],t[6],t[10]],r),t},V3.direction=function(e,t,r){return void 0===r&&(r=new MJS_FLOAT_ARRAY_TYPE(3)),V3.normalize(V3.sub(t,e,r),r)},V3.equalScalar=function(e,t,r){var n=Math.abs(e),i=Math.abs(t),a=Math.abs(e-t);return e===t?!0:e*t===0?r*r>a:r>a/(n+i)},V3.equal=function(e,t,r){void 0===r&&(r=1e-6);var n=V3.equalScalar(e[0],t[0],r);return n=n&&V3.equalScalar(e[1],t[1],r),n=n&&V3.equalScalar(e[2],t[2],r)},M4x4.makeInversePerspective=function(e,t,r,n,i){var a=r*Math.tan(e*Math.PI/360),o=-a,s=o*t,l=a*t;return M4x4.makeInverseFrustum(s,l,o,a,r,n,i)},M4x4.makeInverseFrustum=function(e,t,r,n,i,a,o){return void 0===o&&(o=new MJS_FLOAT_ARRAY_TYPE(16)),o[0]=(-e+t)/(2*i),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=(-r+n)/(2*i),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=0,o[11]=-(a-i)/(2*a*i),o[12]=(e+t)/(2*i),o[13]=(r+n)/(2*i),o[14]=-1,o[15]=(a+i)/(2*a*i),o},M4x4.copy=function(e,t){for(var r=0;16>r;r++)t[r]=e[r]},String.prototype.repeat=function(e){for(var t="",r=0;e>r;r++)t+=this;return t},String.prototype.leftPad=function(e,t){null==t&&(t=" ");var r="",n=e-this.length;return n>0&&(r=t.repeat(n)+this),r},String.prototype.rightPad=function(e,t){null==t&&(t=" ");var r="",n=e-this.length;return n>0&&(r=this+t.repeat(n)),r},String.fromBuffer=function(e){for(var t="",r=new Uint8Array(e),n=0;n<r.length;n++)t+=String.fromCharCode(r[n]);return t},Object.defineProperty(String.prototype,"first",{get:function(){return"lala"}}),ArrayBuffer=ArrayBuffer,ArrayBuffer.prototype.subarray=function(e,t){null==t&&(t=this.byteLength-e);for(var r=new ArrayBuffer(t),n=new Int8Array(r),i=new Int8Array(this),a=0;t>a;a++)n[a]=i[e+a];return r},Float32Array=Float32Array,Float32Array.prototype.toString=function(){for(var e="",t=0;t<this.length;t++)e+=this[t],t<this.length-1&&(e+=", ");return e},Float32Array.prototype.toMatrixFormString=function(){for(var e="",t=0;t<this.length;t++)0!==t&&t%4===0&&(e+="\n"),e+=this[t].toFixed(3)+"	";return e},Object.defineProperties(Float32Array.prototype,{x:{get:function(){return this[0]}},y:{get:function(){return this[1]}},z:{get:function(){return this[2]}},w:{get:function(){return this[3]}},r:{get:function(){return this[0]}},g:{get:function(){return this[1]}},b:{get:function(){return this[2]}},a:{get:function(){return this[3]}}});var inheriting={};KeyListener.pressedKeys=new Array,KeyListener.listener=new Array,KeyListener.addListener=function(e){KeyListener.listener.contains(e)||KeyListener.listener.push(e)},KeyListener.removeListener=function(e){KeyListener.listener.remove(e)},KeyListener.keyDown=function(e){KeyListener.pressedKeys.contains(e.which)||KeyListener.pressedKeys.push(e.which);for(var t=0;t<KeyListener.listener.length;t++)KeyListener.listener[t].invokeKeyDown(e);e.stopPropagation()},KeyListener.keyUp=function(e){KeyListener.pressedKeys.remove(e.which);for(var t=0;t<KeyListener.listener.length;t++)KeyListener.listener[t].invokeKeyUp(e)},KeyListener.keyPress=function(e){for(var t=0;t<KeyListener.listener.length;t++)KeyListener.listener[t].invokeKeyPress(e)},KeyCodes.SPACE=32,KeyCodes.M=77,KeyCodes.NUMBER_1=49,KeyCodes.NUMBER_2=50,KeyCodes.NUMBER_3=51,KeyCodes.f=102,KeyCodes.c=99,KeyCodes.A=65,KeyCodes.S=83,KeyCodes.D=68,KeyCodes.W=87,KeyCodes.M=77,KeyCodes.LEFT_ARROW=37,KeyCodes.UP_ARROW=38,KeyCodes.RIGHT_ARROW=39,KeyCodes.DOWN_ARROW=40,MouseListener.x=null,MouseListener.y=null,MouseListener.pressedKeys=new Array,MouseListener.listener=new Array,MouseListener.addListener=function(e){MouseListener.listener.contains(e)||MouseListener.listener.push(e)},MouseListener.removeListener=function(e){MouseListener.listener.remove(e)},MouseListener.mouseDown=function(e){MouseListener.pressedKeys.push(e.button);for(var t=0;t<MouseListener.listener.length;t++)MouseListener.listener[t].invokeMouseDown(e);return!1},MouseListener.mouseUp=function(e){MouseListener.pressedKeys.remove(e.button);for(var t=0;t<MouseListener.listener.length;t++)MouseListener.listener[t].invokeMouseUp(e);return!1},MouseListener.mouseWheel=function(e){for(var t=window.event||e,r=t.detail?-120*t.detail:t.wheelDelta,n=!0,i=0;i<MouseListener.listener.length;i++)n=n&&MouseListener.listener[i].invokeMouseWheel(r,e);return n},MouseListener.mouseMove=function(e){null==MouseListener.x&&(MouseListener.x=e.screenX,MouseListener.y=e.screenY);var t=e.screenX-MouseListener.x,r=e.screenY-MouseListener.y;if(MouseListener.x=e.screenX,MouseListener.y=e.screenY,MouseListener.pressedKeys.length>0)for(var n=0;n<MouseListener.listener.length;n++)MouseListener.listener[n].invokeMouseDrag(e,MouseListener.pressedKeys,t,r);else for(var n=0;n<MouseListener.listener.length;n++)MouseListener.listener[n].invokeMouseMove(e,t,r);return!0},Mouse.left=0,Mouse.middle=1,Mouse.right=2,TextureManager.textures=new Array,TextureManager.getTexture=function(e){for(var t=0;t<this.textures.length;t++){var r=this.textures[t];if(r.name===e)return r}return null},TextureManager.loadTexture=function(e,t){var r=new Image;r.onload=function(){var n=new Texture;n.source=e,n.name=t,n.image=r,gl.bindTexture(gl.TEXTURE_2D,n.glid),gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,!0),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,n.image),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.bindTexture(gl.TEXTURE_2D,null),TextureManager.textures.push(n)},r.src=e},Texture.prototype.setData=function(e,t,r){var n=0;gl.bindTexture(gl.TEXTURE_2D,this.glid),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,t,r,n,gl.RGBA,gl.UNSIGNED_BYTE,e),gl.bindTexture(gl.TEXTURE_2D,null)},MaterialManager.materials=new Array,MaterialManager.addMaterial=function(e){if(null!=MaterialManager.getMaterial(e.name)){var t="material has already been created: "+e.name;throw Logger.error(t),t}this.materials.push(e)},MaterialManager.getMaterial=function(e){for(var t=0;t<this.materials.length;t++){var r=this.materials[t];if(r.name===e)return r}return null},Shader.count=0,ShaderAttribute.Position="aVertexPosition",ShaderAttribute.Color="aVertexColor",ShaderAttribute.Normal="aVertexNormal",Shader.prototype.initUniforms=function(){this.uniforms={};for(var e=gl.getProgramParameter(this.program,gl.ACTIVE_UNIFORMS),t=0;e>t;t++){var r=gl.getActiveUniform(this.program,t),n=r.name;this.uniforms[n]=gl.getUniformLocation(this.program,n)}},Shader.prototype.initAttributes=function(){this.attributes={};for(var e=gl.getProgramParameter(this.program,gl.ACTIVE_ATTRIBUTES),t=0;e>t;t++){var r=gl.getActiveAttrib(this.program,t),n=r.name;this.attributes[n]=gl.getAttribLocation(this.program,n)}},Shader.prototype.relink=function(){null==this.vertexShaderName&&console.log("Shader.vertexShaderName is null -> Shader won't be linked"),null==this.fragmentShaderName&&console.log("Shader.fragmentShaderName is null -> Shader won't be linked"),null!==this.program&&gl.deleteProgram(program),this.program=gl.createProgram();var e=ShaderManager.getVertexShader(this.vertexShaderName),t=ShaderManager.getFragmentShader(this.fragmentShaderName);return gl.attachShader(this.program,e),gl.attachShader(this.program,t),gl.linkProgram(this.program),gl.getProgramParameter(this.program,gl.LINK_STATUS)?void 0:void console.log(gl.getProgramInfoLog(this.program))},Shader.prototype.setVertexShaderName=function(e){this.vertexShaderName=e},Shader.prototype.setFragmentShaderName=function(e){this.fragmentShaderName=e},Plane.prototype.distanceTo=function(e){var t=this.normal[0],r=this.normal[1],n=this.normal[2],i=-(t*e[0]+r*e[1]+n*e[2]);return this.distance-i},Plane.prototype.intersection=function(e,t){var r=this.normal,n=e,i=t,a=this.distance,o=-(a+V3.dot(r,n))/V3.dot(r,i),s=V3.add(n,V3.scale(t,o));return s},Plane.prototype.intersectionDistance=function(e,t){var r=this.normal,n=e,i=t,a=this.distance,o=-(a+V3.dot(r,n))/V3.dot(r,i);return o},Frustum.fromCamera=function(e){var t=new Frustum,r=e.globalTransformation,n=2*e.nearClipPlane*Math.tan(e.fieldOfView*Math.PI/360),i=2*e.farClipPlane*Math.tan(e.fieldOfView*Math.PI/360),a=n*e.aspectRatio,o=i*e.aspectRatio,s=[0,0,-e.nearClipPlane],l=[0,0,-e.farClipPlane];return t.pNearUL=V3.add(s,[-a/2,+n/2,0]),t.pNearUR=V3.add(s,[+a/2,+n/2,0]),t.pNearLL=V3.add(s,[-a/2,-n/2,0]),t.pNearLR=V3.add(s,[+a/2,-n/2,0]),t.pFarUL=V3.add(l,[-o/2,+i/2,0]),t.pFarUR=V3.add(l,[+o/2,+i/2,0]),t.pFarLL=V3.add(l,[-o/2,-i/2,0]),t.pFarLR=V3.add(l,[+o/2,-i/2,0]),t.pNearUL=V3.transform(t.pNearUL,r),t.pNearUR=V3.transform(t.pNearUR,r),t.pNearLL=V3.transform(t.pNearLL,r),t.pNearLR=V3.transform(t.pNearLR,r),t.pFarUL=V3.transform(t.pFarUL,r),t.pFarUR=V3.transform(t.pFarUR,r),t.pFarLL=V3.transform(t.pFarLL,r),t.pFarLR=V3.transform(t.pFarLR,r),t.nearPlane=Frustum.calculatePlane(t.pNearLL,t.pNearUL,t.pNearLR),t.farPlane=Frustum.calculatePlane(t.pFarLR,t.pFarUR,t.pFarLL),t.leftPlane=Frustum.calculatePlane(t.pFarLL,t.pFarUL,t.pNearLL),t.rightPlane=Frustum.calculatePlane(t.pNearLR,t.pNearUR,t.pFarLR),t.topPlane=Frustum.calculatePlane(t.pNearUR,t.pNearUL,t.pFarUR),t.bottomPlane=Frustum.calculatePlane(t.pNearLL,t.pNearLR,t.pFarLL),t.planes=[t.nearPlane,t.farPlane,t.leftPlane,t.rightPlane,t.topPlane,t.bottomPlane],t},Frustum.calculatePlane=function(e,t,r){var n=V3.direction(e,t),i=V3.direction(e,r),a=V3.cross(n,i),o=a[0],s=a[1],l=a[2],u=e[0],h=e[1],d=e[2],p=-o*u-s*h-l*d;return new Plane(p,a)},Frustum.prototype.isOutside=function(e){for(var t=0;t<this.planes.length;t++){var r=this.planes[t];if(r.distanceTo(e.getPositive(r.normal))<0)return!0}return!1},Renderer.prototype.viewport=function(e,t,r,n){this._viewport=[e,t,r,n],gl.viewport(e,t,r,n)},Renderer.prototype.worldPosAt=function(e){this.worldPosCallbackQueue.push(e)},Renderer.prototype._worldPosAt=function(e,t,r,n){var i=this.fboColor,a=this.fboDepthAsRGBA;this.fboColor=null,null==this.fboWorldPosAt&&(this.fboWorldPosAt=new Framebuffer(this._viewport[2],this._viewport[3])),this.fboWorldPosAt.bind(),gl.clearColor(this.bgColor.r,this.bgColor.g,this.bgColor.b,this.bgColor.a),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.enable(gl.SCISSOR_TEST),gl.scissor(e-r/2,t-r/2,r,n),this.fboDepthAsRGBA=this.fboWorldPosAt,this.render();var o=new Uint8Array(r*n*4);gl.readPixels(e-r/2,t-n/2,r,n,gl.RGBA,gl.UNSIGNED_BYTE,o);for(var s=1/0,l=null,u=0;r*n>u;u++){var h=u%r-r/2,d=u/n-n/2,p=h*h+d*d,f=4*u,c=[o[f+0],o[f+1],o[f+2],o[f+3]];(c[0]+c[1]+c[2]!==0||255!==c[3])&&s>p&&(l=c)}var g=50;if(null!=l){var m=l[0]/255,y=l[1]/255,b=l[2]/255,P=l[3]/255,v=m/16777216+y/65536+b/256+P,A=this.camera.inverseProjectionMatrix;g=Math.abs(V3.transform(V3.$(0,0,v),A).z)}var S=null,x=e/Potree.canvas.width,T=t/Potree.canvas.height,M=this.camera.getDirection(x,T),w=this.camera.getFarClipIntersection(x,T),F=this.camera.getNearClipIntersection(x,T),E=V3.length(w),_=(V3.length(F),g/this.camera.farClipPlane*E);return S=V3.add(this.camera.globalPosition,V3.scale(M,_)),this.fboColor=i,this.fboDepthAsRGBA=a,gl.disable(gl.SCISSOR_TEST),gl.viewport(this._viewport[0],this._viewport[1],this._viewport[2],this._viewport[3]),S},Renderer.prototype.clear=function(){null!=this.fboColor&&(this.fboColor.bind(),gl.clearColor(this.bgColor.r,this.bgColor.g,this.bgColor.b,this.bgColor.a),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT))},Renderer.prototype.render=function(){this.clear(),this.lights=new Array;var e=new Array,t=new Array,r=new Array;this.camera=this.scene.activeCamera;var n=new Array;for(n.push(this.scene.rootNode);n.length>0;){var i=n.pop();for(var a in i.children)n.push(i.children[a]);i instanceof Light?this.lights.push(i):i instanceof PointCloudSceneNode?e.push(i):i instanceof PointcloudOctreeSceneNode?t.push(i):i instanceof Sphere?r.push(i):i instanceof MeshNode&&r.push(i)}for(var a=0;a<e.length;a++){var i=e[a];i.render(this)}for(var a=0;a<t.length;a++){var i=t[a];i.render(this)}for(var a=0;a<r.length;a++){var i=r[a];i.render(this)}if(null==this.fboDepthAsRGBA){for(var a=0;a<this.worldPosCallbackQueue.length;a++){var o=this.worldPosCallbackQueue[a],s=this._worldPosAt(o.x,o.y,o.width,o.height);o.callback(s)}this.worldPosCallbackQueue.length=0}},AABB.prototype.setDimension=function(e,t,r,n,i,a,o,s){this.p0=e,this.p1=t,this.p2=r,this.p3=n,this.p4=i,this.p5=a,this.p6=o,this.p7=s,this.update()},AABB.prototype.setDimensionByMinMax=function(e,t){this.p0=[e[0],e[1],t[2]],this.p1=[t[0],e[1],t[2]],this.p2=[t[0],e[1],e[2]],this.p3=[e[0],e[1],e[2]],this.p4=[e[0],t[1],t[2]],this.p5=[t[0],t[1],t[2]],this.p6=[t[0],t[1],e[2]],this.p7=[e[0],t[1],e[2]],this.update()},AABB.prototype.setTransform=function(e){this.transform=e,this.update()},AABB.tmpVec=V3.$(0,0,0),AABB.prototype.update=function(){this.objectSpaceMin[0]=Math.min(this.p0[0],this.p1[0],this.p2[0],this.p3[0],this.p4[0],this.p5[0],this.p6[0],this.p7[0]),this.objectSpaceMin[1]=Math.min(this.p0[1],this.p1[1],this.p2[1],this.p3[1],this.p4[1],this.p5[1],this.p6[1],this.p7[1]),this.objectSpaceMin[2]=Math.min(this.p0[2],this.p1[2],this.p2[2],this.p3[2],this.p4[2],this.p5[2],this.p6[2],this.p7[2]),this.objectSpaceMax[0]=Math.max(this.p0[0],this.p1[0],this.p2[0],this.p3[0],this.p4[0],this.p5[0],this.p6[0],this.p7[0]),this.objectSpaceMax[1]=Math.max(this.p0[1],this.p1[1],this.p2[1],this.p3[1],this.p4[1],this.p5[1],this.p6[1],this.p7[1]),this.objectSpaceMax[2]=Math.max(this.p0[2],this.p1[2],this.p2[2],this.p3[2],this.p4[2],this.p5[2],this.p6[2],this.p7[2]),V3.transform(this.p0,this.transform,this.tp0),V3.transform(this.p1,this.transform,this.tp1),V3.transform(this.p2,this.transform,this.tp2),V3.transform(this.p3,this.transform,this.tp3),V3.transform(this.p4,this.transform,this.tp4),V3.transform(this.p5,this.transform,this.tp5),V3.transform(this.p6,this.transform,this.tp6),V3.transform(this.p7,this.transform,this.tp7),this.min[0]=Math.min(this.tp0[0],this.tp1[0],this.tp2[0],this.tp3[0],this.tp4[0],this.tp5[0],this.tp6[0],this.tp7[0]),this.min[1]=Math.min(this.tp0[1],this.tp1[1],this.tp2[1],this.tp3[1],this.tp4[1],this.tp5[1],this.tp6[1],this.tp7[1]),this.min[2]=Math.min(this.tp0[2],this.tp1[2],this.tp2[2],this.tp3[2],this.tp4[2],this.tp5[2],this.tp6[2],this.tp7[2]),this.max[0]=Math.max(this.tp0[0],this.tp1[0],this.tp2[0],this.tp3[0],this.tp4[0],this.tp5[0],this.tp6[0],this.tp7[0]),this.max[1]=Math.max(this.tp0[1],this.tp1[1],this.tp2[1],this.tp3[1],this.tp4[1],this.tp5[1],this.tp6[1],this.tp7[1]),this.max[2]=Math.max(this.tp0[2],this.tp1[2],this.tp2[2],this.tp3[2],this.tp4[2],this.tp5[2],this.tp6[2],this.tp7[2]),V3.add(this.min,this.max,this.center),V3.scale(this.center,.5,this.center),V3.sub(this.max,this.min,AABB.tmpVec),this.radius=V3.length(AABB.tmpVec)/2},AABB.prototype.getOnScreenSize=function(e,t){var r=e.globalTransformation,n=t.viewMatrix,i=t.projectionMatrix,a=M4x4.mul(i,M4x4.mul(n,r)),o=V3.transform(this.min,a),s=V3.transform(this.max,a),l=V3.sub(o,s),u=V3.length(l);return u},AABB.prototype.setColor=function(e){this.color=e},AABB.prototype.render=function(e,t){this.material.setColor(this.color),this.material.render(this,e,t)},AABB.prototype.getPositive=function(e){var t=this.min,r=this.max,n=[t[0],t[1],t[2]];return e[0]>=0&&(n[0]=r[0]),e[1]>=0&&(n[1]=r[1]),e[2]>=0&&(n[2]=r[2]),n},AABB.prototype.getNegative=function(e){var t=this.min,r=this.max,n=[r[0],r[1],r[2]];return e[0]>=0&&(n[0]=t[0]),e[1]>=0&&(n[1]=t[1]),e[2]>=0&&(n[2]=t[2]),n},Object.defineProperty(SceneNode.prototype,"visible",{set:function(e){this._visible=e},get:function(){return this._visible}}),Object.defineProperty(SceneNode.prototype,"scene",{set:function(e){this._scene=e},get:function(){return this._scene}}),Object.defineProperty(SceneNode.prototype,"transform",{get:function(){return this._transform},set:function(e){this._transform=e}}),Object.defineProperty(SceneNode.prototype,"localTransformation",{get:function(){return this._transform}}),Object.defineProperty(SceneNode.prototype,"globalTransformation",{get:function(){var e=this,t=this.tmpMatrix1,r=this.tmpMatrix2;for(M4x4.copy(e._transform,t);null!=e.parent;){e=e.parent,M4x4.mul(e._transform,t,r);var n=t;t=r,r=n}return t}}),Object.defineProperty(SceneNode.prototype,"localPosition",{set:function(e){var t=this.localPosition;this.translate(-t.x,-t.y,-t.z),this.translate(e.x,e.y,e.z)},get:function(){return V3.transform(V3.$(0,0,0),this._transform)}}),Object.defineProperty(SceneNode.prototype,"globalPosition",{set:function(e){var t=(this.localPosition,this.globalPosition),r=V3.sub(e,t);this.translate(r.x,r.y,r.z)},get:function(){return V3.transform(V3.$(0,0,0),this.globalTransformation,this._globalPosition),this._globalPosition}}),Object.defineProperty(SceneNode.prototype,"descendants",{get:function(){var e=new Array,t=new Array;for(t.push(this);0!==t.length;){var r=t.pop();e.push(r);for(var n in r.children)t.push(r.children[n])}return e}}),SceneNode.prototype.getLocalDirection=function(){var e=V3.transform(V3.$(0,0,0),this._transform),t=V3.transform(V3.$(0,0,-1),this._transform),r=V3.normalize(V3.sub(t,e));return r},SceneNode.prototype.getGlobalDirection=function(){var e=this.globalTransformation,t=V3.transform(V3.$(0,0,0),e),r=V3.transform(V3.$(0,0,-1),e),n=V3.normalize(V3.sub(r,t));return n},SceneNode.prototype.getUpVector=function(){var e=V3.transform(V3.$(0,0,0),this._transform),t=V3.transform(V3.$(0,1,0),this._transform),r=V3.sub(t,e);return r},SceneNode.prototype.getSideVector=function(){var e=V3.transform(V3.$(0,0,0),this._transform),t=V3.transform(V3.$(1,0,0),this._transform),r=V3.sub(t,e);return r},SceneNode.prototype.getViewVector=function(){var e=V3.transform(V3.$(0,0,0),this._transform),t=V3.transform(V3.$(1,0,0),this._transform),r=V3.sub(t,e);return r},SceneNode.prototype.addTime=function(e){this.age+=e;for(var t in this.children)this.children[t].addTime(e)},SceneNode.prototype.setParent=function(e){null!=this.parent&&delete this.parent.children[this.name],this.parent=e,null!=e&&(e.children[this.name]=this,this.scene=e.scene)
},SceneNode.prototype.addChild=function(e){null!=e.parent&&delete e.parent.children[e.name],e.parent=this,e.scene=this.scene,this.children[e.name]=e},SceneNode.prototype.removeChild=function(e){e.parent==this&&this.children[e.name]==e&&(e.parent=null,delete this.children[e.name])},SceneNode.prototype.getInverseLocalTransformation=function(){var e=this.localPosition,t=M4x4.translate3(-e[0],-e[1],-e[2],M4x4.I),r=M4x4.mul(t,this._transform),n=M4x4.inverseOrthonormal(r);return M4x4.mul(n,t)},SceneNode.prototype.getInverseGlobalTransformation=function(){var e=this.globalPosition;M4x4.translate3(-e[0],-e[1],-e[2],M4x4.I,this.tmpMatrix1);var t=this.tmpMatrix1;return M4x4.mul(t,this.globalTransformation,this.tmpMatrix2),M4x4.inverseOrthonormal(this.tmpMatrix2,this.tmpMatrix3),M4x4.mul(this.tmpMatrix3,t,this.tmpMatrix2),this.tmpMatrix2},SceneNode.prototype.translate=function(e,t,r){this._transform=M4x4.mul(M4x4.makeTranslate3(e,t,r),this._transform)},SceneNode.prototype.rotate=function(e,t){this._transform=M4x4.mul(M4x4.rotate(e,t,M4x4.I),this._transform)},SceneNode.prototype.rotateX=function(e){this._transform=M4x4.mul(M4x4.rotate(e,V3.$(1,0,0),M4x4.I),this._transform)},SceneNode.prototype.rotateY=function(e){this._transform=M4x4.mul(M4x4.rotate(e,V3.$(0,1,0),M4x4.I),this._transform)},SceneNode.prototype.rotateZ=function(e){this._transform=M4x4.mul(M4x4.rotate(e,V3.$(0,0,-1),M4x4.I),this._transform)},SceneNode.prototype.resetTransformation=function(){this.transform=M4x4.I},SceneNode.prototype.yaw=SceneNode.prototype.rotateY,SceneNode.prototype.pitch=SceneNode.prototype.rotateX,SceneNode.prototype.roll=SceneNode.prototype.rotateZ,Object.defineProperty(SceneNode.prototype,"yaw",{set:function(e){var t=this.getYaw();this.rotateY(e-t)},get:function(){return this.getYaw()}}),Object.defineProperty(SceneNode.prototype,"pitch",{set:function(e){var t=this.getPitch();this.rotateX(e-t)},get:function(){return this.getPitch()}}),SceneNode.prototype.rotate=function(e,t){this._transform=M4x4.mul(M4x4.rotate(e,t,M4x4.I),this._transform)},SceneNode.prototype.rotateAroundPivot=function(e,t,r){this.translate(-r.x,-r.y,-r.z),this.rotateY(e),this.rotate(t,this.getSideVector()),this.translate(r.x,r.y,r.z)},SceneNode.prototype.scale=function(e,t,r){this._transform=M4x4.scale3(e,t,r,this._transform)},SceneNode.prototype.getYaw=function(){var e=this.getLocalDirection();e[1]=0,e=V3.normalize(e);var t=Math.atan2(-e.z,e.x)-Math.PI/2;return 0>t&&(t=2*Math.PI+t),t},SceneNode.prototype.getPitch=function(){var e=this.getLocalDirection(),t=this.getYaw(),r=M4x4.makeRotate(-t,[0,1,0]);e=V3.transform(e,r);var n=Math.atan2(e.y,-e.z);return n},Object.defineProperty(SceneNode.prototype,"pointOfView",{set:function(e){this.resetTransformation(),this.pitch+=e.pitch,this.yaw+=e.yaw,this.localPosition=e.pos,console.log(this.yaw)},get:function(){var e={pos:this.localPosition,yaw:this.yaw,pitch:this.pitch};return e}}),SceneNode.prototype.lookAt=function(e){var t=this.globalPosition,r=V3.direction(t,e),n=V3.$(0,1,0),i=V3.cross(n,r);n=V3.cross(r,i),i=V3.neg(i),n=V3.neg(n),r=V3.neg(r);var a=M4x4.$(i.x,i.y,i.z,0,n.x,n.y,n.z,0,r.x,r.y,r.z,0,0,0,0,1),o=M4x4.makeTranslate3(t.x,t.y,t.z);this.transform=M4x4.mul(o,a)},SceneNode.prototype.render=function(){},SceneNode.prototype.toString=function(){return this.asTreeString(0)},SceneNode.prototype.asTreeString=function(e){var t=" ".repeat(3*e)+this.name+"	"+this.globalPosition+"\n";for(var r in this.children)t+=this.children[r].asTreeString(e+1);return t},Camera.prototype=new SceneNode(inheriting),Camera.base=SceneNode.prototype,Object.defineProperties(Camera.prototype,{farClipPlane:{set:function(e){this._farClipPlane=e,this.updateProjectionMatrix()},get:function(){return this._farClipPlane}},nearClipPlane:{set:function(e){this._nearClipPlane=e,this.updateProjectionMatrix()},get:function(){return this._nearClipPlane}},transform:{set:function(e){Object.getOwnPropertyDescriptor(Camera.base,"transform").set.call(this,e),this.updateViewMatrix()},get:function(){return this._transform}},frustum:{get:function(){return Frustum.fromCamera(this)}},projectionMatrix:{get:function(){return this._projectionMatrix}},inverseProjectionMatrix:{get:function(){return this._inverseProjectionMatrix}},viewMatrix:{get:function(){return this.viewMatrix=this.getInverseGlobalTransformation(),this._viewMatrix},set:function(e){this._viewMatrix=e}},fieldOfView:{set:function(e){this._fieldOfView=e,this.updateProjectionMatrix()},get:function(){return this._fieldOfView}},aspectRatio:{set:function(e){this._aspectRatio=e,this.updateProjectionMatrix()},get:function(){return this._aspectRatio}}}),Camera.prototype.updateProjectionMatrix=function(){this._projectionMatrix=M4x4.makePerspective(this.fieldOfView,this.aspectRatio,this.nearClipPlane,this.farClipPlane),this._inverseProjectionMatrix=M4x4.makeInversePerspective(this.fieldOfView,this.aspectRatio,this.nearClipPlane,this.farClipPlane)},Camera.prototype.updateViewMatrix=function(){this.viewMatrix=this.getInverseGlobalTransformation()},Camera.prototype.translate=function(e,t,r){Camera.base.translate.call(this,e,t,r),this.updateViewMatrix()},Camera.prototype.getDirection=function(e,t){var r=this.nearClipPlane*Math.tan(this.fieldOfView*Math.PI/360),n=-r,i=n*this.aspectRatio,a=r*this.aspectRatio,o=(1-e)*i+e*a,s=(1-t)*n+t*r,l=this.nearClipPlane,u=V3.normalize(V3.$(o,s,-l));return u=V3.transform(u,this.globalTransformation),u=V3.sub(u,this.globalPosition),V3.normalize(u)},Camera.prototype.getFarClipIntersection=function(e,t){var r=this.nearClipPlane*Math.tan(this.fieldOfView*Math.PI/360),n=-r,i=n*this.aspectRatio,a=r*this.aspectRatio,o=(1-e)*i+e*a,s=(1-t)*n+t*r,l=this.nearClipPlane,u=V3.normalize(V3.$(o,s,-l)),h=new Plane(this.farClipPlane,V3.$(0,0,1)),d=h.intersection(V3.$(0,0,0),u);return d},Camera.prototype.getNearClipIntersection=function(e,t){var r=this.nearClipPlane*Math.tan(this.fieldOfView*Math.PI/360),n=-r,i=n*this.aspectRatio,a=r*this.aspectRatio,o=(1-e)*i+e*a,s=(1-t)*n+t*r,l=this.nearClipPlane,u=V3.normalize(V3.$(o,s,-l)),h=new Plane(this.nearClipPlane,V3.$(0,0,1)),d=h.intersection(V3.$(0,0,0),u);return d},Camera.prototype.zoomTo=function(e,t){null==t&&(t=1);var r=e.aabb,n=this.getGlobalDirection();this.globalPosition=r.center,this.translate(V3.scale(n,-1).x,V3.scale(n,-1).y,V3.scale(n,-1).z);for(var i=(this.frustum,Number.MAX_VALUE),a=Number.MIN_VALUE,o=0;8>o;o++){var s=r["tp"+o],l=this.frustum.leftPlane.intersectionDistance(s,n),u=this.frustum.rightPlane.intersectionDistance(s,n),h=this.frustum.topPlane.intersectionDistance(s,n),d=this.frustum.bottomPlane.intersectionDistance(s,n),p=Math.max(l,u,h,d);i=Math.min(i,p),a=Math.max(a,p)}var f=V3.scale(n,-a*t);this.translate(f.x,f.y,f.z)},Object.defineProperty(Scene.prototype,"nodes",{get:function(){var e=new Array;e.push(this.rootNode),e.push(this.rootNode.descendants)}}),MeshNode.prototype=new SceneNode(inheriting),MeshNode.prototype.render=function(e){this.visible&&this.mesh.render(this,e)},LightType.OMNI=0,LightType.SPOT=1,LightType.DIRECTIONAL=2,Light.prototype=new SceneNode(inheriting),Light.prototype.notifyChildAttachedToParent=function(){this.scene.lights[this.name]=this},Object.defineProperty(Light.prototype,"red",{get:function(){return this.colour[0]},set:function(e){this.colour[0]=e}}),Object.defineProperty(Light.prototype,"green",{get:function(){return this.colour[1]},set:function(e){this.colour[1]=e}}),Object.defineProperty(Light.prototype,"blue",{get:function(){return this.colour[2]},set:function(e){this.colour[2]=e}}),Sphere.prototype=new SceneNode(inheriting),Object.defineProperty(Sphere.prototype,"mesh",{get:function(){if(null===this._mesh){this._mesh=new Mesh("sphere");var e=new SubMesh(this._mesh);this._mesh.addSubMesh(e);for(var t=[],r=[],n=[],i=[],a=Math.PI/this.tesselation,o=2*Math.PI/a,s=this.tesselation,l=0,u=0;s>=u;u++)for(var h=0;o>h;h++){var d=h*a,p=Math.cos(Math.PI*u/s),f=Math.cos(d)*Math.sqrt(1-p*p),c=Math.sin(d)*Math.sqrt(1-p*p),g=p;if(t.push(f),t.push(c),t.push(g),r.push(f),r.push(c),r.push(g),n.push(f/2+.5),n.push(c/2*.5),l>=o){if(i.push(l-o),i.push(l),i.push(h===o-1?l+1-o:l+1),h===o-1){var m=Math.max(0,l+1-o-o);i.push(m)}else i.push(l-o+1);i.push(l-o),i.push(h===o-1?l+1-o:l+1)}l++}e.setVertexBufferData("POSITION",new Float32Array(t)),e.setVertexBufferData("NORMAL",new Float32Array(r)),e.setVertexBufferData("TEXCOORD_0",new Float32Array(n)),e.setIndexBufferData(new Uint16Array(i)),e.vertexCount=t.length/3;var y=MaterialManager.getMaterial("default");this._mesh.material=y}return this._mesh}}),Sphere.prototype.render=function(e){this.mesh.render(this,e)},Object.defineProperty(Sphere.prototype,"material",{get:function(){return this.mesh.material},set:function(e){this.mesh.material=e}}),MeshType={TRIANGLES:0,LINES:1,POINTS:2},Mesh.prototype.setType=function(e){if(this.type=e,e===MeshType.TRIANGLES)this.glType=gl.TRIANGLES;else if(e===MeshType.LINES)this.glType=gl.LINES;else{if(e!==MeshType.POINTS)throw"unknown mesh type: "+e+". use one of the MeshType members.";this.glType=gl.POINTS}},Mesh.prototype.render=function(e,t){for(var r=0;r<this.subMeshes.length;r++){var n=this.subMeshes[r];n.render(e,t)}},Mesh.prototype.addSubMesh=function(e){this.subMeshes.push(e)},Mesh.prototype.setMaterial=function(e){this.material=e},Object.defineProperty(Mesh.prototype,"material",{get:function(){return this._material},set:function(e){this._material=e;for(var t=0;t<this.subMeshes.length;t++){var r=this.subMeshes[t];r.material=e}}}),SubMesh.prototype.setMaterial=function(e){this.material=e},Object.defineProperty(SubMesh.prototype,"material",{get:function(){return this._material},set:function(e){this._material=e}}),SubMesh.prototype.setVertexBufferData=function(e,t){null==this.vbos[e]&&(this.vbos[e]=gl.createBuffer()),gl.bindBuffer(gl.ARRAY_BUFFER,this.vbos[e]),gl.bufferData(gl.ARRAY_BUFFER,t,gl.STATIC_DRAW)},SubMesh.prototype.setIndexBufferData=function(e){null==this.ibo&&(this.ibo=gl.createBuffer()),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.ibo),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,e,gl.STATIC_DRAW),this.indices=e},SubMesh.prototype.render=function(e,t){this.material.renderSubMesh(this,e,t)},CamHandler.prototype.addTime=function(){},CamHandler.prototype.invokeKeyDown=function(){},CamHandler.prototype.invokeKeyUp=function(){},CamHandler.prototype.invokeKeyPress=function(){},CamHandler.prototype.invokeMouseDown=function(){},CamHandler.prototype.invokeMouseUp=function(){},CamHandler.prototype.invokeMouseMove=function(){},CamHandler.prototype.invokeMouseDrag=function(){},CamHandler.prototype.invokeMouseWheel=function(){},FreeFlightCamHandler.prototype=new CamHandler,FreeFlightCamHandler.prototype.addTime=function(e){this.update(e)},FreeFlightCamHandler.prototype.update=function(e){this.velocity[0]=.2*this.velocity[0]+.8*this.targetVelocity[0]*this.targetVelocityMultiplicator,this.velocity[1]=.2*this.velocity[1]+.8*this.targetVelocity[1]*this.targetVelocityMultiplicator,this.velocity[2]=.2*this.velocity[2]+.8*this.targetVelocity[2]*this.targetVelocityMultiplicator;var t=[this.velocity[0]*e,this.velocity[1]*e,this.velocity[2]*e];this.camera.transform=M4x4.translate3(t[0],t[1],t[2],this.camera.transform),this.qualityToggle>0&&(this.qualityToggle-=e)},FreeFlightCamHandler.prototype.invokeKeyDown=function(e){83===e.which?this.targetVelocity[2]=1*this.speedMultiplier:87===e.which?this.targetVelocity[2]=-1*this.speedMultiplier:68===e.which?this.targetVelocity[0]=1*this.speedMultiplier:65===e.which&&(this.targetVelocity[0]=-1*this.speedMultiplier)},FreeFlightCamHandler.prototype.invokeKeyUp=function(e){83===e.which?this.targetVelocity[2]=0:87===e.which?this.targetVelocity[2]=0:68===e.which?this.targetVelocity[0]=0:65===e.which&&(this.targetVelocity[0]=0)},FreeFlightCamHandler.prototype.invokeKeyPress=function(){},FreeFlightCamHandler.prototype.invokeMouseDown=function(){},FreeFlightCamHandler.prototype.invokeMouseUp=function(){},FreeFlightCamHandler.prototype.invokeMouseMove=function(){},FreeFlightCamHandler.prototype.invokeMouseDrag=function(e,t,r,n){if(mouseIsInCanvas(e)&&Potree.canvas==document.activeElement)if(1===t.length&&t.contains(Mouse.left)&&e.altKey)this.camera.transform=M4x4.translate3(this.speedMultiplier*-r/10,this.speedMultiplier*n/10,0,this.camera.transform),this.qualityToggle=.1;else if(1===t.length&&t.contains(Mouse.left)){var i=this.camera.localPosition,a=M4x4.translate3(-i[0],-i[1],-i[2],M4x4.I),o=M4x4.rotate(-r/100,[0,1,0],M4x4.I),s=M4x4.rotate(-n/100,this.camera.getSideVector(),M4x4.I),l=M4x4.translate3(i[0],i[1],i[2],M4x4.I),u=M4x4.mul(a,this.camera.transform);u=M4x4.mul(s,u),u=M4x4.mul(l,u),this.camera.transform=u,u=M4x4.mul(a,this.camera.transform),u=M4x4.mul(o,u),u=M4x4.mul(l,u),this.camera.transform=u,this.qualityToggle=.1}},FreeFlightCamHandler.prototype.invokeMouseWheel=function(e){var t=e/2e3;this.speedMultiplier+=t,this.speedMultiplier=Math.max(.01,Math.min(10,this.speedMultiplier))},OrbitCamHandler.prototype=new CamHandler,OrbitCamHandler.prototype.update=function(){},OrbitCamHandler.prototype.invokeMouseDrag=function(e,t,r,n){var i=-this.rotateSpeed*timeSinceLastFrame;this.camera.rotateAroundPivot(i*r,i*n,this.pivot)},OrbitCamHandler.prototype.invokeMouseWheel=function(e){var t=this.camera.getGlobalDirection(),r=V3.scale(t,e*timeSinceLastFrame*this.zoomSpeed);this.camera.transform=M4x4.mul(M4x4.makeTranslate3(r.x,r.y,r.z),this.camera.transform)},EarthCamHandler.prototype=new CamHandler,EarthCamHandler.prototype.addTime=function(e){this.update(e)},EarthCamHandler.prototype.update=function(e){this.velocity[0]=.2*this.velocity[0]+.8*this.targetVelocity[0]*this.targetVelocityMultiplicator,this.velocity[1]=.2*this.velocity[1]+.8*this.targetVelocity[1]*this.targetVelocityMultiplicator,this.velocity[2]=.2*this.velocity[2]+.8*this.targetVelocity[2]*this.targetVelocityMultiplicator;var t=V3.rTransform(this.velocity,this.camera.transform),r=V3.length(t);r>.01&&(t[1]=0,t=V3.normalize(t)),t=V3.scale(t,this.moveSpeed*e*r),this.camera.translate(t[0],0,t[2])},EarthCamHandler.prototype.invokeKeyDown=function(e){e.which===KeyCodes.DOWN_ARROW||e.which==KeyCodes.S?this.targetVelocity[2]=1*this.moveSpeed:e.which===KeyCodes.UP_ARROW||e.which==KeyCodes.W?this.targetVelocity[2]=-1*this.moveSpeed:e.which===KeyCodes.RIGHT_ARROW||e.which==KeyCodes.D?this.targetVelocity[0]=1*this.moveSpeed:(e.which===KeyCodes.LEFT_ARROW||e.which==KeyCodes.A)&&(this.targetVelocity[0]=-1*this.moveSpeed)},EarthCamHandler.prototype.invokeKeyUp=function(e){e.which===KeyCodes.DOWN_ARROW||e.which==KeyCodes.S?this.targetVelocity[2]=0:e.which===KeyCodes.UP_ARROW||e.which==KeyCodes.W?this.targetVelocity[2]=0:e.which===KeyCodes.RIGHT_ARROW||e.which==KeyCodes.D?this.targetVelocity[0]=0:(e.which===KeyCodes.LEFT_ARROW||e.which==KeyCodes.A)&&(this.targetVelocity[0]=0)},EarthCamHandler.prototype.invokeKeyPress=function(e){e.which==KeyCodes.M&&this.logView()},EarthCamHandler.prototype.invokeMouseDown=function(){},EarthCamHandler.prototype.invokeMouseUp=function(){},EarthCamHandler.prototype.invokeMouseMove=function(){},EarthCamHandler.prototype.invokeMouseDrag=function(e,t,r,n){if(!this.fetchingWorldPos)if(1==t.length&&e.shiftKey&&t.contains(Mouse.left)){var i=-this.rotateSpeed*timeSinceLastFrame;this.camera.rotateAroundPivot(i*r,i*n,this.pivot)}else if(1==t.length&&t.contains(Mouse.left)){var a=new Plane(-this.pivot.y,[0,1,0]),o=this.clickToCamDirection(e),s=a.intersection(this.originAtNavigationStart,o),l=V3.sub(this.originAtNavigationStart,s),u=V3.add(this.pivot,l),h=V3.sub(u,this.originAtNavigationStart),d=M4x4.makeTranslate3(h.x,h.y,h.z);this.camera.transform=M4x4.mul(d,this.transformAtNavigationStart)}},EarthCamHandler.prototype.fetchingPosition=!1,EarthCamHandler.prototype.invokeMouseDown=function(e){if(e.target==Potree.canvas&&mouseIsInCanvas(e)){e.preventDefault(),this.transformAtNavigationStart=this.camera.transform,this.originAtNavigationStart=V3.transform([0,0,0],this.transformAtNavigationStart);var t=this,r=function(e){t.pivot=e,t.fetchingWorldPos=!1},n={x:e.layerX,y:Potree.canvas.height-e.layerY,width:32,height:32,callback:r};return this.fetchingWorldPos=!0,renderer.worldPosAt(n),mouseIsInCanvas(e)}},EarthCamHandler.prototype.invokeMouseWheel=function(e,t){if(mouseIsInCanvas(t)){t.preventDefault(),dir=this.clickToCamDirection(t);var r=V3.scale(dir,e*timeSinceLastFrame*this.zoomSpeed),n=M4x4.makeTranslate3(r.x,r.y,r.z);this.camera.transform=M4x4.mul(n,this.camera.transform)}},EarthCamHandler.prototype.clickToCamDirection=function(e){var t=e.layerX/Potree.canvas.width,r=(Potree.canvas.height-e.layerY)/Potree.canvas.height,n=this.camera.getDirection(t,r);return n},EarthCamHandler.prototype.logView=function(){console.log("== VIEW =="),console.log(this),console.log(this.camera),console.log("===========")},Framebuffer.getSystemBuffer=function(){return null==Framebuffer.systemBuffer&&(Framebuffer.systemBuffer=new Framebuffer("system")),Framebuffer.systemBuffer},Framebuffer.getActiveBuffer=function(){return null==Framebuffer.activeBuffer&&(Framebuffer.activeBuffer=Framebuffer.getSystemBuffer()),Framebuffer.activeBuffer},Framebuffer.setActiveBuffer=function(e){Framebuffer.activeBuffer=e},Framebuffer.prototype.setSize=function(e,t){this.initBufferStuff(e,t)},Framebuffer.prototype.initOtherStuff=function(){this.vbo=gl.createBuffer(),this.texcoordvbo=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this.vbo);var e=new Float32Array([0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0]);gl.bufferData(gl.ARRAY_BUFFER,e,gl.STATIC_DRAW),gl.bindBuffer(gl.ARRAY_BUFFER,this.texcoordvbo),e=new Float32Array([0,0,1,0,1,1,0,0,1,1,0,1]),gl.bufferData(gl.ARRAY_BUFFER,e,gl.STATIC_DRAW)},Framebuffer.prototype.updateScreenQuad=function(e,t){gl.bindBuffer(gl.ARRAY_BUFFER,this.vbo);var r=new Float32Array([e[0],e[1],0,t[0],e[1],0,t[0],t[1],0,e[0],e[1],0,t[0],t[1],0,e[0],t[1],0]);gl.bufferData(gl.ARRAY_BUFFER,r,gl.STATIC_DRAW)},Framebuffer.prototype.initBufferStuff=function(e,t){(this.width!==e||this.height!==t)&&(this.width=e,this.height=t,gl.bindFramebuffer(gl.FRAMEBUFFER,null),null!=this.texture&&(gl.deleteTexture(this.texture.glid),this.texture=null),null!=this.renderbuffer&&(gl.deleteRenderbuffer(this.renderbuffer),this.renderbuffer=null),null!=this.framebuffer&&(gl.deleteFramebuffer(this.framebuffer),this.framebuffer=null),this.framebuffer=gl.createFramebuffer(),this.texture=new Texture,this.renderbuffer=gl.createRenderbuffer(),gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer),this.framebuffer.width=e,this.framebuffer.height=t,this.initColorbuffer(),gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderbuffer),gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.framebuffer.width,this.framebuffer.height),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture.glid,0),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.renderbuffer),this.checkBuffer(),gl.bindTexture(gl.TEXTURE_2D,null),gl.bindRenderbuffer(gl.RENDERBUFFER,null),gl.bindFramebuffer(gl.FRAMEBUFFER,null))},Framebuffer.prototype.initColorbuffer=function(){gl.bindTexture(gl.TEXTURE_2D,this.texture.glid),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,this.framebuffer.width,this.framebuffer.height,0,gl.RGBA,gl.UNSIGNED_BYTE,null)},Framebuffer.prototype.checkBuffer=function(){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);var e=gl.checkFramebufferStatus(gl.FRAMEBUFFER);switch(e){case gl.FRAMEBUFFER_COMPLETE:break;case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw console.log("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT"),"";case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw console.log("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"),"";case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw console.log("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS"),"";case gl.FRAMEBUFFER_UNSUPPORTED:throw console.log("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED"),"";default:throw console.log("Incomplete framebuffer: "+e),""}},Framebuffer.bindDefault=function(){Framebuffer.activeBuffer=Framebuffer.getSystemBuffer(),gl.bindFramebuffer(gl.FRAMEBUFFER,null)},Framebuffer.prototype.bind=function(){Framebuffer.activeBuffer=this,gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer)},Framebuffer.prototype.drawTexture=function(e,t,r){this.bind();var n=ShaderManager.getShader("drawTexture");if(gl.useProgram(n.program),this.updateScreenQuad(t,r),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),null==this.framebuffer){var i=document.getElementById("canvas");gl.uniform1f(n.uniforms.uWidth,i.width),gl.uniform1f(n.uniforms.uHeight,i.height)}else gl.uniform1f(n.uniforms.uWidth,this.width),gl.uniform1f(n.uniforms.uHeight,this.height);gl.activeTexture(gl.TEXTURE0),gl.bindTexture(gl.TEXTURE_2D,e.glid),gl.uniform1i(n.uniforms.uTexture,0),gl.activeTexture(gl.TEXTURE1),gl.bindTexture(gl.TEXTURE_2D,this.renderbuffer),gl.uniform1i(n.uniforms.uDepth,0),gl.enableVertexAttribArray(n.attributes.aVertexPosition),gl.enableVertexAttribArray(n.attributes.aTexcoords),gl.bindBuffer(gl.ARRAY_BUFFER,this.vbo),gl.vertexAttribPointer(n.attributes.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,this.texcoordvbo),gl.vertexAttribPointer(n.attributes.aTexcoords,2,gl.FLOAT,!1,0,0),gl.disable(gl.DEPTH_TEST),gl.drawArrays(gl.TRIANGLES,0,6),gl.disableVertexAttribArray(n.attributes.aVertexPosition),gl.disableVertexAttribArray(n.attributes.aTexcoords)},Framebuffer.prototype.drawFullscreenQuad=function(e){gl.useProgram(e.program),this.updateScreenQuad([-1,-1],[1,1]),gl.enableVertexAttribArray(e.attributes.aVertexPosition),gl.enableVertexAttribArray(e.attributes.aTexcoord),gl.bindBuffer(gl.ARRAY_BUFFER,this.vbo),gl.vertexAttribPointer(e.attributes.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,this.texcoordvbo),gl.vertexAttribPointer(e.attributes.aTexcoord,2,gl.FLOAT,!1,0,0),gl.drawArrays(gl.TRIANGLES,0,6),gl.disableVertexAttribArray(e.attributes.aVertexPosition),gl.disableVertexAttribArray(e.attributes.aTexcoord)},FramebufferFloat32.prototype=new Framebuffer(inheriting),FramebufferFloat32.base=Framebuffer.prototype,FramebufferFloat32.prototype.initColorbuffer=function(){gl.bindTexture(gl.TEXTURE_2D,this.texture.glid),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,this.framebuffer.width,this.framebuffer.height,0,gl.RGBA,gl.FLOAT,null)},ShaderManager.vertexShader=new Object,ShaderManager.fragmentShader=new Object,ShaderManager.shader=new Array,ShaderManager.loadVertexShader=function(e,t){var r=ShaderManager.loadShader(e,gl.VERTEX_SHADER,t);ShaderManager.vertexShader[e]=r},ShaderManager.loadFragmentShader=function(e,t){var r=ShaderManager.loadShader(e,gl.FRAGMENT_SHADER,t);ShaderManager.fragmentShader[e]=r},ShaderManager.getVertexShader=function(e){return null==ShaderManager.vertexShader[e]&&ShaderManager.loadVertexShader(e,ShaderManager.getShaderSource(e)),ShaderManager.vertexShader[e]},ShaderManager.getFragmentShader=function(e){return null==ShaderManager.fragmentShader[e]&&ShaderManager.loadFragmentShader(e,ShaderManager.getShaderSource(e)),ShaderManager.fragmentShader[e]},ShaderManager.loadShader=function(e,t,r){var n=gl.createShader(t);if(!n)return null;if(gl.shaderSource(n,r),gl.compileShader(n),!gl.getShaderParameter(n,gl.COMPILE_STATUS)){var i="compiling shader '"+e+"' failed: "+gl.getShaderInfoLog(n);return alert(i),null}return n},ShaderManager.getShaderSource=function(e){if(null!=Potree.shaderSources&&null!=Potree.shaderSources[e])return Potree.shaderSources[e];var t=Potree.shaderDir+"/"+e;return load_binary_resource(t)},ShaderManager.addShader=function(e){if(null!==ShaderManager.getShader(e.name)){var t="shader has already been created: "+e.name;throw t}ShaderManager.shader.push(e)},ShaderManager.getShader=function(e){for(var t=0;t<this.shader.length;t++){var r=this.shader[t];if(r.name===e)return r}return null},MeshUtils.createRectangle=function(){var e=new Mesh,t=new SubMesh;e.addSubMesh(t);var r=new Float32Array([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,-1]),n=new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1]),i=new Float32Array([1,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1]),a=new Uint8Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);t.setVertexBufferData("POSITION",r),t.setVertexBufferData("NORMAL",n),t.setVertexBufferData("TEXCOORD_0",i),t.setIndexBufferData(a);var o=MaterialManager.getMaterial("grid");return e.setMaterial(o),e},MeshUtils.createGrid=function(e,t,r){var n=new Mesh,i=new SubMesh;n.addSubMesh(i);for(var a=t+r+2,o=new Float32Array(2*a*3),s=-(e*r/2),l=-(e*t/2),u=0;r>=u;u++){var h=6*u;o[h+0]=s,o[h+1]=0,o[h+2]=l,o[h+3]=s,o[h+4]=0,o[h+5]=-l,s+=e}for(var s=-(e*t/2),l=-(e*r/2),u=r+1;t+r+1>=u;u++){var h=6*u;o[h+0]=s,o[h+1]=0,o[h+2]=l,o[h+3]=-s,o[h+4]=0,o[h+5]=l,l+=e}i.setVertexBufferData("POSITION",o),i.vertexCount=2*a,n.setType(MeshType.LINES);var d=new FlatMaterial("grid",[.7,.7,.7,1]);return n.setMaterial(d),n},MeshUtils.createLine=function(e,t){var r=new Mesh,n=new SubMesh;r.addSubMesh(n);var i=new Float32Array([e[0],e[1],e[2],t[0],t[1],t[2]]);n.setVertexBufferData("POSITION",i),n.vertexCount=2,r.setType(MeshType.LINES);var a=ShaderManager.getShader("defaultFlat");return r.setMaterial(a),r},MeshUtils.createQuad=function(e,t,r,n){var i=new Mesh,a=new SubMesh;i.addSubMesh(a);var o=new Float32Array([e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2],e[0],e[1],e[2],r[0],r[1],r[2],n[0],n[1],n[2]]);a.setVertexBufferData("POSITION",o),a.vertexCount=6,i.setType(MeshType.TRIANGLES);var s=ShaderManager.getShader("defaultFlat");return i.setMaterial(s),i},PointcloudOctreeSceneNode.prototype=new SceneNode(inheriting),PointcloudOctreeSceneNode.base=SceneNode.prototype,PointcloudOctreeSceneNode.prototype.render=function(e,t){null!=this.mno&&this.visible&&this.mno.render(this,e,t)},PointcloudOctreeSceneNode.prototype.addTime=function(e){this.age+=e,this.mno.addTime(e)},Object.defineProperty(PointcloudOctreeSceneNode.prototype,"minDepth",{get:function(){return this.mno.minDepth},set:function(e){this.mno.minDepth=e}}),Object.defineProperty(PointcloudOctreeSceneNode.prototype,"aabb",{get:function(){var e=this.mno.rootNode.aabb;return e.setTransform(this.globalTransformation),e}}),PointCloudSceneNode.prototype=new SceneNode(inheriting),PointCloudSceneNode.base=SceneNode.prototype,Object.defineProperty(PointCloudSceneNode.prototype,"aabb",{get:function(){var e=new AABB;return e.setDimensionByMinMax(this.pointCloud.aabb.min,this.pointCloud.aabb.max),e.setTransform(this.transform),e}}),PointCloudSceneNode.prototype.render=function(e){null!=this.pointCloud&&this.visible&&this.material.render(this,e)},PointCloudSceneNode.prototype.addTime=function(){},PointCloud.prototype.unload=function(){null!==this.vbo&&(gl.bindBuffer(gl.ARRAY_BUFFER,null),gl.deleteBuffer(this.vbo),this.vbo=null)},PointCloud.prototype.setVertexBufferData=function(e){null===this.vbo&&(this.vbo=gl.createBuffer()),gl.bindBuffer(gl.ARRAY_BUFFER,this.vbo),gl.bufferData(gl.ARRAY_BUFFER,e,gl.STATIC_DRAW)},PointcloudOctreeNode.useFading=!0,PointcloudOctreeNode.loadingNodes=new Array,PointcloudOctreeNode.memoryThreshold=3e8,PointcloudOctreeNode.nodesLoadedThisFrame=0,PointcloudOctreeNode.lruNodes=null,PointcloudOctreeNode.prototype.shouldBeRendered=!1,PointcloudOctreeNode.prototype.sizeInBytes=function(){return this.poc.pointAttributes.byteSize*this.points},PointcloudOctreeNode.prototype.fadeIn=function(){PointcloudOctreeNode.useFading?this.fade=1:this.opacity=1},PointcloudOctreeNode.prototype.isFadingOut=function(){return this.fade<0},PointcloudOctreeNode.prototype.fadeOut=function(){PointcloudOctreeNode.useFading?this.fade=-1:this.opacity=0},PointcloudOctreeNode.prototype.isVisible=function(){return!0},PointcloudOctreeNode.prototype.setOpacity=function(e){this.fade=0,this.opacity=e},PointcloudOctreeNode.prototype.setPointCloud=function(e){this.pointCloud=e,this.age=0},PointcloudOctreeNode.prototype.addTime=function(){},PointcloudOctreeNode.prototype.setAABB=function(e){this.aabb=e},Object.defineProperty(PointcloudOctreeNode.prototype,"aabb",{get:function(){return this._aabb},set:function(e){this._aabb=e}}),PointcloudOctreeNode.prototype.addChild=function(e){var t=e.name.replace(this.name,"");if(1===t.length)null==this.children[t]&&(this.children[t]=e,e.parent=this);else if(t.length>1){var r=t[0];null!=this.children[r]?this.children[r].addChild(e):(this.children[r]=e,e.parent=this)}else logError("something is wrong with the path: "),logError("this.name: "+this.name),logError("child.name: "+e.name),logError("path: "+t)},PointcloudOctreeNode.prototype.unload=function(){null!==this.pointCloud?(this.pointCloud.unload(),this.pointCloud=null):Logger.error("tried to unload node but it is not loaded")},PointcloudOctreeNode.loadCloudAjax=function(e){if(e.isLoading)return void console.log("node is already loading: "+e.name);e.isLoading=!0,PointcloudOctreeNode.loadingNodes.push(e),e.poc.nodesBeeingLoaded.push(e);var t=e.poc.octreeDir+"/"+e.name,r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onreadystatechange=function(){if(4===r.readyState)if(200===r.status||0===r.status){var n=r.response;PointcloudOctreeNode.loadCloudData(e,n,t)}else console.log("Failed to load file! HTTP status: "+r.status+", file: "+t)};try{r.send(null)}catch(n){console.log("fehler beim laden der punktwolke: "+n)}},PointcloudOctreeNode.loadCloudData=function(e,t,r){PointcloudOctreeNode.nodesLoadedThisFrame++;var n=new PointCloud(r,e.poc.pointAttributes);n.setVertexBufferData(t),n.size=t.byteLength/e.poc.pointAttributes.byteSize,e.setPointCloud(n),PointcloudOctreeNode.lruNodes.touch(e),e.isLoading=!1,PointcloudOctreeNode.loadingNodes.remove(e),e.poc.nodesBeeingLoaded.remove(e)},POCRenderQueue.prototype.add=function(e){this.nodes[e.id]=e,this.nodeList.push(e),this.byteSize+=e.sizeInBytes(),this.points+=e.points,this.length++},POCRenderQueue.prototype.contains=function(e){return null!==this.nodes[e.id]},POCRenderQueue.prototype.get=function(e){return this.nodeList[e]},POCRenderQueue.prototype.cap=function(e){for(var t=0,r=this.byteSize;r>e;){var n=this.nodeList[this.nodeList.length-t-1];t++,r-=n.sizeInBytes()}0>t&&this.nodeList.splice(-t,t),this.length=this.nodeList.length},POCRenderQueue.prototype.capNodeCount=function(e){var t=Math.min(e,this.length);this.nodeList=this.nodeList.splice(0,t),this.length=this.nodeList.length},POCRenderQueue.prototype.clear=function(){this.byteSize=0,this.nodes=new Object,this.nodeList.length=0,this.length=0,this.points=0},PointcloudOctree.prototype.setMaterial=function(e){this.material=e},PointcloudOctree.prototype.setRootNode=function(e){this.rootNode=e},PointcloudOctree.prototype.setPointAttributes=function(e){this.pointAttributes=e},PointcloudOctree.visibilityToggle=0,PointcloudOctree.prototype.prepareRender=function(e,t){PointcloudOctree.visibilityToggle=PointcloudOctree.visibilityToggle+1,this.renderQueue.clear();var r=this.tmpStack;r.length=0,r.push(this.rootNode);var n=t.viewMatrix,i=null;for(Potree.Settings.frustumCulling&&(i=t.frustum);r.length>0;){for(var a=new Array;r.length>0;){var o=r.pop(),s=!0,l=this.aabbVersion>o.aabb.version;if(l=l&&(Potree.Settings.frustumCulling||s&&Potree.Settings.LOD),l&&(o.aabb.setTransform(e.globalTransformation),o.aabb.version=this.aabbVersion),Potree.Settings.frustumCulling&&i.isOutside(o.aabb)&&(s=!1),s&&Potree.Settings.LOD){var u=V3.transform(o.aabb.center,n),h=u[0]*u[0]+u[1]*u[1]+u[2]*u[2];
o.level>this.minDepth&&h>10*Potree.Settings.LODMultiplicator*o.aabb.radius*o.aabb.radius&&(o.fadeOut(),s=!1)}if(s&&null===o.pointCloud)o.isLoading||this.loadQueue.push(o);else if(!o.isLoading)if(o.isVisible()){if(s){for(var d in o.children)a.push(o.children[d]);this.renderQueue.add(o),PointcloudOctreeNode.lruNodes.touch(o)}o.shouldBeRendered=s}else s&&o.fadeIn()}r=a}this.processLoadQueue()},PointcloudOctree.cleanupCache=function(e,t){for(var r=PointcloudOctreeNode.lruNodes,n=0;6>n;n++)if(r.byteSize+e>PointcloudOctreeNode.memoryThreshold){var i=r.getLRUItem();null===i||t.contains(i)||(i=r.removeLRUItem(),i.unload())}},PointcloudOctree.prototype.render=function(e,t){this.prepareRender(e,t.camera),this.material.render(e,t)},PointcloudOctree.prototype.addTime=function(e){this.rootNode.addTime(e)},PointcloudOctree.prototype.processLoadQueue=function(){var e=PointcloudOctreeNode.lruNodes,t=5,r=0;if(this.loadQueue.length>0)for(var n=0;n<Math.min(t,this.loadQueue.length);n++)r+=this.loadQueue[n].sizeInBytes();if(PointcloudOctree.cleanupCache(r,this.renderQueue),this.loadQueue.length>0)for(var n=0;n<Math.min(t,this.loadQueue.length);n++)e.byteSize+this.loadQueue[n].sizeInBytes()<PointcloudOctreeNode.memoryThreshold&&this.nodesBeeingLoaded.length<this.loadingNodesLimit&&PointcloudOctreeNode.loadCloudAjax(this.loadQueue[n]);this.loadQueue.length=0},Object.defineProperty(PointcloudOctree.prototype,"aabb",{get:function(){return this.rootNode.aabb}}),Material.count=0,WeightedPointSizeMaterial.prototype=new Material(inheriting),WeightedPointSizeMaterial.prototype.render=function(e,t){var r=e.globalTransformation,n=new Array;if(e instanceof PointCloudSceneNode)n.push(e.pointCloud);else if(e instanceof PointcloudOctreeSceneNode)for(var i=e.mno.renderQueue,a=0;a<i.length;a++){var o=i.get(a);n.push(o.pointCloud)}null!=t.fboColor&&this.renderPointClouds(r,n,t),null!=t.fboPosition&&this.renderPointCloudsPosition(r,n,t),null!=t.fboDepthAsRGBA&&this.renderPointCloudsDepthAsRGBA(r,n,t)},WeightedPointSizeMaterial.prototype.renderPointCloudsDepthAsRGBA=function(e,t,r){{var n=r.camera;r.lights}r.fboDepthAsRGBA.bind(),gl.enable(gl.DEPTH_TEST),gl.disable(gl.BLEND);var i=this.rgbaDepthShader,a=i.uniforms,o=i.attributes;gl.useProgram(i.program),gl.uniformMatrix4fv(a.uWorld,!1,e),gl.uniformMatrix4fv(a.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(a.uProj,!1,n.projectionMatrix),gl.uniform1f(a.uPointSizeMultiplicator,this.pointSize),gl.uniform2f(a.uViewportSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);for(var s=0;s<t.length;s++){var l=t[s],u=l.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,l.vbo);for(var h=0,d=0;d<u.size;d++){var p=u.attributes[d];p===PointAttribute.POSITION_CARTESIAN&&(gl.enableVertexAttribArray(o.aVertexPosition),gl.vertexAttribPointer(o.aVertexPosition,3,gl.FLOAT,!1,u.byteSize,h)),h+=p.byteSize}gl.drawArrays(gl.POINTS,0,l.size),gl.disableVertexAttribArray(o.aNormal)}},WeightedPointSizeMaterial.prototype.renderPointCloudsPosition=function(e,t,r){{var n=r.camera;r.lights}r.fboPosition.bind(),gl.enable(gl.DEPTH_TEST),gl.disable(gl.BLEND);for(var i=0;i<t.length;i++){var a=t[i],o=a.pointAttributes;gl.useProgram(this.posShader.program),gl.uniformMatrix4fv(this.posShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.posShader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.posShader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.posShader.uniforms.uPointSizeMultiplicator,this.pointSize),gl.uniform2f(this.posShader.uniforms.uViewportSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.bindBuffer(gl.ARRAY_BUFFER,a.vbo);for(var s=0,l=0;l<o.size;l++){var u=o.attributes[l];u===PointAttribute.POSITION_CARTESIAN&&(gl.enableVertexAttribArray(this.posShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.posShader.attributes.aVertexPosition,3,gl.FLOAT,!1,o.byteSize,s)),s+=u.byteSize}gl.drawArrays(gl.POINTS,0,a.size),gl.disableVertexAttribArray(this.posShader.attributes.aNormal)}},WeightedPointSizeMaterial.prototype.renderPointClouds=function(e,t,r){{var n=r.camera;r.lights}r.fboColor.bind(),gl.enable(gl.DEPTH_TEST),gl.disable(gl.BLEND);for(var i=0;i<t.length;i++){var a=t[i],o=a.pointAttributes;gl.useProgram(this.shader.program),gl.uniformMatrix4fv(this.shader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.shader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.shader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.shader.uniforms.uPointSizeMultiplicator,this.pointSize),gl.uniform2f(this.shader.uniforms.uViewportSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.bindBuffer(gl.ARRAY_BUFFER,a.vbo);for(var s=0,l=0;l<o.size;l++){var u=o.attributes[l];u===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.shader.attributes.aVertexPosition),gl.vertexAttribPointer(this.shader.attributes.aVertexPosition,3,gl.FLOAT,!1,o.byteSize,s)):u===PointAttribute.RGBA_PACKED?null!==this.shader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.shader.attributes.aVertexColour),gl.vertexAttribPointer(this.shader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,o.byteSize,s)):u===PointAttribute.RGB_PACKED?null!==this.shader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.shader.attributes.aVertexColour),gl.vertexAttribPointer(this.shader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,o.byteSize,s)):u===PointAttribute.NORMAL_FLOATS&&null!==this.shader.attributes.aNormal&&(gl.enableVertexAttribArray(this.shader.attributes.aNormal),gl.vertexAttribPointer(this.shader.attributes.aNormal,3,gl.FLOAT,!1,o.byteSize,s)),s+=u.byteSize}gl.drawArrays(gl.POINTS,0,a.size),gl.disableVertexAttribArray(this.shader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.shader.attributes.aVertexColour),gl.disableVertexAttribArray(this.shader.attributes.aNormal)}},FixedPointSizeMaterial.prototype=new Material(inheriting),FixedPointSizeMaterial.prototype.render=function(e,t){var r=e.globalTransformation,n=new Array;if(e instanceof PointCloudSceneNode)n.push(e.pointCloud);else if(e instanceof PointcloudOctreeSceneNode)for(var i=e.mno.renderQueue,a=0;a<i.length;a++){var o=i.get(a);n.push(o.pointCloud)}null!=t.fboColor&&this.renderPointClouds(r,n,t)},FixedPointSizeMaterial.prototype.renderPointClouds=function(e,t,r){{var n=r.camera;r.lights}r.fboColor.bind(),gl.enable(gl.DEPTH_TEST),gl.disable(gl.BLEND),gl.useProgram(this.shader.program),gl.uniformMatrix4fv(this.shader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.shader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.shader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.shader.uniforms.uPointSize,this.pointSize),gl.uniform2f(this.shader.uniforms.uViewportSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);for(var i=0;i<t.length;i++){var a=t[i],o=a.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,a.vbo);for(var s=0,l=0;l<o.size;l++){var u=o.attributes[l];u==PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.shader.attributes.aVertexPosition),gl.vertexAttribPointer(this.shader.attributes.aVertexPosition,3,gl.FLOAT,!1,o.byteSize,s)):u==PointAttribute.COLOR_PACKED?null!=this.shader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.shader.attributes.aVertexColour),gl.vertexAttribPointer(this.shader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,o.byteSize,s)):u==PointAttribute.NORMAL_FLOATS&&null!=this.shader.attributes.aNormal&&(gl.enableVertexAttribArray(this.shader.attributes.aNormal),gl.vertexAttribPointer(this.shader.attributes.aNormal,3,gl.FLOAT,!1,o.byteSize,s)),s+=u.byteSize}gl.drawArrays(gl.POINTS,0,a.size),gl.disableVertexAttribArray(this.shader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.shader.attributes.aVertexColour),gl.disableVertexAttribArray(this.shader.attributes.aNormal)}};var IlluminationMode={FLAT:{value:0,name:"Flat"},PHONG:{value:1,name:"Phong"},NORMALS:{value:2,name:"Normals"},POSITION:{value:3,name:"Position"}},PointCloudRenderMode={FIXED_CIRCLE:{value:0,name:"fixed circle"},WEIGHTED_CIRCLE:{value:1,name:"weighted circle"},FILTERED_SPLAT:{value:3,name:"filtered splat"},GAUSS_FILL:{value:4,name:"gauss fill"}};PointCloudMaterial.prototype=new Material(inheriting),PointCloudMaterial.prototype.render=function(e,t){null!=t.fboDepthAsRGBA?this.weightedMaterial.render(e,t):this.activeMaterial.render(e,t)},Object.defineProperty(PointCloudMaterial.prototype,"renderMode",{set:function(e){this._renderMode=e,this.renderMode===PointCloudRenderMode.FIXED_CIRCLE?this.activeMaterial=this.fixedMaterial:this.renderMode===PointCloudRenderMode.WEIGHTED_CIRCLE?this.activeMaterial=this.weightedMaterial:this.renderMode===PointCloudRenderMode.FILTERED_SPLAT?FilteredSplatsMaterial.isSupported()?this.activeMaterial=this.filteredMaterial:(this.activeMaterial=this.weightedMaterial,console.log("FILTERED_SPLAT material is not supported on your system. ")):this.renderMode===PointCloudRenderMode.GAUSS_FILL&&(GaussFillMaterial.isSupported()?this.activeMaterial=this.gaussFillMaterial:(this.activeMaterial=this.weightedMaterial,console.log("GAUSS_FILL material is not supported on your system. ")))},get:function(){return this._renderMode}}),Object.defineProperty(PointCloudMaterial.prototype,"pointSize",{set:function(e){this._pointSize=e,null!==this.filteredMaterial&&(this.filteredMaterial.pointSize=e),this.weightedMaterial.pointSize=e,this.fixedMaterial.pointSize=e,null!==this.gaussFillMaterial&&(this.gaussFillMaterial.pointSize=e)},get:function(){return this._pointSize}}),Object.defineProperty(PointCloudMaterial.prototype,"blendDepth",{set:function(e){this._blendDepth=e,null!=this.filteredMaterial&&(this.filteredMaterial.blendDepth=e)},get:function(){return this._blendDepth}}),Object.defineProperty(PointCloudMaterial.prototype,"illuminationMode",{set:function(e){this._illuminationMode=e,FilteredSplatsMaterial.isSupported()&&(this.filteredMaterial.illuminationMode=e),this.weightedMaterial.illuminationMode=e,this.fixedMaterial.illuminationMode=e},get:function(){return this._illuminationMode}}),FlatMaterial.prototype=new Material(inheriting),FlatMaterial.prototype.setColor=function(e){this.color=e},FlatMaterial.prototype.render=function(e,t,r){e instanceof AABB?this.renderAABB(e,t,r):e instanceof SubMesh&&this.renderSubMesh(e,t,r)},FlatMaterial.prototype.renderSubMesh=function(e,t,r){var n=r.camera,i=(r.lights,this.flatShader),a=(n.scene,t.mesh);gl.useProgram(i.program),gl.uniformMatrix4fv(i.uniforms.uWorld,!1,t.globalTransformation),gl.uniformMatrix4fv(i.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(i.uniforms.uProj,!1,n.projectionMatrix);var o=n.globalPosition;gl.uniform3f(i.uniforms.uViewPos,o[0],o[1],o[2]),gl.uniform4f(i.uniforms.uColor,this.color[0],this.color[1],this.color[2],this.color[3]),gl.enableVertexAttribArray(i.attributes.aVertexPosition),gl.bindBuffer(gl.ARRAY_BUFFER,e.vbos.POSITION),gl.vertexAttribPointer(i.attributes.aVertexPosition,3,gl.FLOAT,!1,0,0),null!=e.vbos.TEXCOORD_0&&null!=i.attributes.aTextureCoord&&(gl.enableVertexAttribArray(i.attributes.aTextureCoord),gl.bindBuffer(gl.ARRAY_BUFFER,e.vbos.TEXCOORD_0),gl.vertexAttribPointer(i.attributes.aTextureCoord,2,gl.FLOAT,!1,0,0)),null!=e.ibo?(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,e.ibo),gl.drawElements(a.glType,e.vertexCount,gl.UNSIGNED_SHORT,0)):null!=e.vertexCount&&(gl.lineWidth(10),gl.drawArrays(a.glType,0,e.vertexCount))},PhongMaterial.prototype=new Material(inheriting),PhongMaterial.prototype.setColor=function(e){this.color=e},PhongMaterial.prototype.render=function(e,t,r){e instanceof AABB?this.renderAABB(e,t,r):e instanceof SubMesh&&this.renderSubMesh(e,t,r)},PhongMaterial.prototype.renderSubMesh=function(e,t,r){var n=this.flatShader,i=(r.scene,t.mesh);gl.useProgram(n.program),gl.uniformMatrix4fv(n.uniforms.uWorld,!1,t.globalTransformation),gl.uniformMatrix4fv(n.uniforms.uView,!1,r.viewMatrix),gl.uniformMatrix4fv(n.uniforms.uProj,!1,r.projectionMatrix);var a=r.globalPosition;gl.uniform3f(n.uniforms.uViewPos,a[0],a[1],a[2]),gl.uniform4f(n.uniforms.uColor,this.color[0],this.color[1],this.color[2],this.color[3]),gl.enableVertexAttribArray(n.attributes.aVertexPosition),gl.bindBuffer(gl.ARRAY_BUFFER,e.vbos.POSITION),gl.vertexAttribPointer(n.attributes.aVertexPosition,3,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(n.attributes.aVertexNormal),gl.bindBuffer(gl.ARRAY_BUFFER,e.vbos.NORMAL),gl.vertexAttribPointer(n.attributes.aVertexNormal,3,gl.FLOAT,!1,0,0),null!=e.ibo?(gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,e.ibo),gl.drawElements(i.glType,e.indices.length,gl.UNSIGNED_SHORT,0)):null!=e.vertexCount&&(gl.lineWidth(10),gl.drawArrays(i.glType,0,e.vertexCount)),gl.disableVertexAttribArray(n.attributes.aVertexNormal),gl.disableVertexAttribArray(n.attributes.aVertexPosition)},FilteredSplatsMaterial.prototype=new Material(inheriting),FilteredSplatsMaterial.isSupported=function(){return null==gl.getExtension("OES_texture_float")?!1:!0},FilteredSplatsMaterial.prototype.render=function(e,t){var r=e.globalTransformation,n=new Array;if(e instanceof PointCloudSceneNode)n.push(e.pointCloud);else if(e instanceof PointcloudOctreeSceneNode)for(var i=e.mno.renderQueue,a=0;a<i.length;a++){var o=i.get(a);n.push(o.pointCloud)}this.renderPointClouds(r,n,t)},FilteredSplatsMaterial.prototype.renderPointClouds=function(e,t,r){var n=Framebuffer.getActiveBuffer();this.depthPass(e,t,r),this.colorPass(e,t,r),(this.illuminationMode===IlluminationMode.PHONG||this.illuminationMode===IlluminationMode.NORMALS)&&this.normalPass(e,t,r),this.shadingPass(n,r)},FilteredSplatsMaterial.prototype.depthPass=function(e,t,r){{var n=r.camera;r.lights}this.depthFBO.bind(),this.depthFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.disable(gl.BLEND),gl.enable(gl.DEPTH_TEST),gl.depthMask(!0),gl.useProgram(this.depthShader.program),gl.uniformMatrix4fv(this.depthShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.depthShader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.depthShader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.depthShader.uniforms.uPointSize,this.pointSize),gl.uniform1f(this.depthShader.uniforms.uNear,n.nearClipPlane),gl.uniform1f(this.depthShader.uniforms.uFar,n.farClipPlane),gl.uniform1f(this.depthShader.uniforms.uBlendDepth,this.blendDepth),gl.uniform2f(this.depthShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);var i=2*n.nearClipPlane*Math.tan(n.fieldOfView*Math.PI/360),a=i*n.aspectRatio;gl.uniform2f(this.depthShader.uniforms.uNearWindowSize,a,i);for(var o=0;o<t.length;o++){var s=t[o],l=s.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,s.vbo);for(var u=0,h=0;h<l.size;h++){var d=l.attributes[h];d===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.depthShader.attributes.aVertexPosition,3,gl.FLOAT,!1,l.byteSize,u)):d===PointAttribute.RGBA_PACKED?null!=this.depthShader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.vertexAttribPointer(this.depthShader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,l.byteSize,u)):d===PointAttribute.NORMAL_FLOATS&&null!=this.depthShader.attributes.aNormal&&(gl.enableVertexAttribArray(this.depthShader.attributes.aNormal),gl.vertexAttribPointer(this.depthShader.attributes.aNormal,3,gl.FLOAT,!1,l.byteSize,u)),u+=d.byteSize}gl.drawArrays(gl.POINTS,0,s.size),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.disableVertexAttribArray(this.depthShader.attributes.aNormal)}},FilteredSplatsMaterial.prototype.colorPass=function(e,t,r){var n=r.camera;this.colorFBO.bind(),this.colorFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.depthFBO.renderbuffer),this.colorFBO.checkBuffer(),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LESS),gl.depthMask(!1),gl.useProgram(this.colorShader.program),gl.uniformMatrix4fv(this.colorShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.colorShader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.colorShader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.colorShader.uniforms.uPointSize,this.pointSize),gl.uniform1f(this.colorShader.uniforms.uNear,n.nearClipPlane),gl.uniform1f(this.colorShader.uniforms.uFar,n.farClipPlane),gl.uniform2f(this.depthShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);var i=2*n.nearClipPlane*Math.tan(n.fieldOfView*Math.PI/360),a=i*n.aspectRatio;gl.uniform2f(this.depthShader.uniforms.uNearWindowSize,a,i);for(var o=0;o<t.length;o++){var s=t[o],l=s.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,s.vbo);for(var u=0,h=0;h<l.size;h++){var d=l.attributes[h];d===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.colorShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.colorShader.attributes.aVertexPosition,3,gl.FLOAT,!1,l.byteSize,u)):d===PointAttribute.RGBA_PACKED?null!=this.colorShader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.colorShader.attributes.aVertexColour),gl.vertexAttribPointer(this.colorShader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,l.byteSize,u)):d===PointAttribute.NORMAL_FLOATS&&null!=this.colorShader.attributes.aNormal&&(gl.enableVertexAttribArray(this.colorShader.attributes.aNormal),gl.vertexAttribPointer(this.colorShader.attributes.aNormal,3,gl.FLOAT,!1,l.byteSize,u)),u+=d.byteSize}gl.drawArrays(gl.POINTS,0,s.size),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.disableVertexAttribArray(this.depthShader.attributes.aNormal)}gl.depthFunc(gl.LESS),gl.depthMask(!0)},FilteredSplatsMaterial.prototype.normalPass=function(e,t,r){var n=r.camera;this.normalFBO.bind(),this.normalFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.depthFBO.renderbuffer),this.normalFBO.checkBuffer(),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LESS),gl.depthMask(!1),gl.useProgram(this.normalShader.program),gl.uniformMatrix4fv(this.normalShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.normalShader.uniforms.uView,!1,n.viewMatrix),gl.uniformMatrix4fv(this.normalShader.uniforms.uProj,!1,n.projectionMatrix),gl.uniform1f(this.normalShader.uniforms.uPointSize,this.pointSize),gl.uniform1f(this.normalShader.uniforms.uNear,n.nearClipPlane),gl.uniform1f(this.normalShader.uniforms.uFar,n.farClipPlane),gl.uniform2f(this.depthShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);var i=2*n.nearClipPlane*Math.tan(n.fieldOfView*Math.PI/360),a=i*n.aspectRatio;gl.uniform2f(this.depthShader.uniforms.uNearWindowSize,a,i);for(var o=0;o<t.length;o++){var s=t[o],l=s.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,s.vbo);for(var u=0,h=0;h<l.size;h++){var d=l.attributes[h];d===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.normalShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.normalShader.attributes.aVertexPosition,3,gl.FLOAT,!1,l.byteSize,u)):d===PointAttribute.RGBA_PACKED?null!=this.normalShader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.normalShader.attributes.aVertexColour),gl.vertexAttribPointer(this.normalShader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,l.byteSize,u)):d===PointAttribute.NORMAL_FLOATS&&null!=this.normalShader.attributes.aNormal&&(gl.enableVertexAttribArray(this.normalShader.attributes.aNormal),gl.vertexAttribPointer(this.normalShader.attributes.aNormal,3,gl.FLOAT,!1,l.byteSize,u)),u+=d.byteSize}gl.drawArrays(gl.POINTS,0,s.size),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.disableVertexAttribArray(this.depthShader.attributes.aNormal)}gl.depthFunc(gl.LESS),gl.depthMask(!0)};var startTime=(new Date).getTime();FilteredSplatsMaterial.prototype.shadingPass=function(e,t){var r=(t.camera,t.lights);if(e.bind(),gl.clearColor(0,0,0,1),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.useProgram(this.normalizationShader.program),gl.disable(gl.DEPTH_TEST),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.activeTexture(gl.TEXTURE0),gl.bindTexture(gl.TEXTURE_2D,this.normalFBO.texture.glid),gl.uniform1i(this.normalizationShader.uniforms.uNormal,0),gl.activeTexture(gl.TEXTURE0+1),gl.bindTexture(gl.TEXTURE_2D,this.colorFBO.texture.glid),gl.uniform1i(this.normalizationShader.uniforms.uColor,1),gl.activeTexture(gl.TEXTURE0+2),gl.bindTexture(gl.TEXTURE_2D,this.depthFBO.texture.glid),gl.uniform1i(this.normalizationShader.uniforms.uPosition,2),gl.uniform1i(this.normalizationShader.uniforms.uIlluminationMode,this.illuminationMode.value),this.illuminationMode===IlluminationMode.PHONG)for(var n=0;n<r.length;n++){var i=r[n],a=i.globalPosition;gl.uniform3f(this.normalizationShader.uniforms.uLightPos,a.x,a.y,a.z),gl.uniform3f(this.normalizationShader.uniforms.uLightColor,i.red,i.green,i.blue),e.drawFullscreenQuad(this.normalizationShader)}else e.drawFullscreenQuad(this.normalizationShader)},GaussFillMaterial.prototype=new Material(inheriting),GaussFillMaterial.isSupported=function(){return null==gl.getExtension("OES_texture_float")?!1:!0},GaussFillMaterial.prototype.render=function(e,t){var r=e.globalTransformation,n=new Array;if(e instanceof PointCloudSceneNode)n.push(e.pointCloud);else if(e instanceof PointcloudOctreeSceneNode)for(var i=e.mno.renderQueue,a=0;a<i.length;a++){var o=i.get(a);n.push(o.pointCloud)}this.renderPointClouds(r,n,t)},GaussFillMaterial.prototype.renderPointClouds=function(e,t,r){var n=Framebuffer.getActiveBuffer(),i=r.camera,a=r.lights;this.depthPass(e,t,i),this.pointsPass(e,t,i),this.spreadXPass(e,t,i),this.spreadYPass(e,t,i),this.normalizationPass(n,i,a)},GaussFillMaterial.prototype.depthPass=function(e,t,r){this.depthFBO.bind(),this.depthFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.disable(gl.BLEND),gl.enable(gl.DEPTH_TEST),gl.depthMask(!0),gl.useProgram(this.depthShader.program),gl.uniformMatrix4fv(this.depthShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.depthShader.uniforms.uView,!1,r.viewMatrix),gl.uniformMatrix4fv(this.depthShader.uniforms.uProj,!1,r.projectionMatrix),gl.uniform1f(this.depthShader.uniforms.uPointSize,this.pointSize),gl.uniform1f(this.depthShader.uniforms.uNear,r.nearClipPlane),gl.uniform1f(this.depthShader.uniforms.uFar,r.farClipPlane),gl.uniform1f(this.depthShader.uniforms.uBlendDepth,this.blendDepth),gl.uniform2f(this.depthShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight);var n=2*r.nearClipPlane*Math.tan(r.fieldOfView*Math.PI/360),i=n*r.aspectRatio;gl.uniform2f(this.depthShader.uniforms.uNearWindowSize,i,n);for(var a=0;a<t.length;a++){var o=t[a],s=o.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,o.vbo);for(var l=0,u=0;u<s.size;u++){var h=s.attributes[u];h===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.depthShader.attributes.aVertexPosition,3,gl.FLOAT,!1,s.byteSize,l)):h===PointAttribute.RGBA_PACKED?null!=this.depthShader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.vertexAttribPointer(this.depthShader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,s.byteSize,l)):h===PointAttribute.NORMAL_FLOATS&&null!=this.depthShader.attributes.aNormal&&(gl.enableVertexAttribArray(this.depthShader.attributes.aNormal),gl.vertexAttribPointer(this.depthShader.attributes.aNormal,3,gl.FLOAT,!1,s.byteSize,l)),l+=h.byteSize}gl.drawArrays(gl.POINTS,0,o.size),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.disableVertexAttribArray(this.depthShader.attributes.aNormal)}},GaussFillMaterial.prototype.pointsPass=function(e,t,r){this.colorFBO.bind(),this.colorFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.depthFBO.renderbuffer),this.colorFBO.checkBuffer(),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT),gl.disable(gl.BLEND),gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LEQUAL),gl.depthMask(!1),gl.useProgram(this.colorShader.program),gl.uniformMatrix4fv(this.colorShader.uniforms.uWorld,!1,e),gl.uniformMatrix4fv(this.colorShader.uniforms.uView,!1,r.viewMatrix),gl.uniformMatrix4fv(this.colorShader.uniforms.uProj,!1,r.projectionMatrix),gl.uniform1f(this.colorShader.uniforms.uNear,r.nearClipPlane),gl.uniform1f(this.colorShader.uniforms.uFar,r.farClipPlane),gl.uniform1f(this.colorShader.uniforms.uPointSize,this.pointSize);for(var n=0;n<t.length;n++){var i=t[n],a=i.pointAttributes;gl.bindBuffer(gl.ARRAY_BUFFER,i.vbo);for(var o=0,s=0;s<a.size;s++){var l=a.attributes[s];l===PointAttribute.POSITION_CARTESIAN?(gl.enableVertexAttribArray(this.colorShader.attributes.aVertexPosition),gl.vertexAttribPointer(this.colorShader.attributes.aVertexPosition,3,gl.FLOAT,!1,a.byteSize,o)):l===PointAttribute.RGBA_PACKED?null!=this.colorShader.attributes.aVertexColour&&(gl.enableVertexAttribArray(this.colorShader.attributes.aVertexColour),gl.vertexAttribPointer(this.colorShader.attributes.aVertexColour,3,gl.UNSIGNED_BYTE,!1,a.byteSize,o)):l===PointAttribute.NORMAL_FLOATS&&null!=this.colorShader.attributes.aNormal&&(gl.enableVertexAttribArray(this.colorShader.attributes.aNormal),gl.vertexAttribPointer(this.colorShader.attributes.aNormal,3,gl.FLOAT,!1,a.byteSize,o)),o+=l.byteSize}gl.drawArrays(gl.POINTS,0,i.size),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexPosition),gl.disableVertexAttribArray(this.depthShader.attributes.aVertexColour),gl.disableVertexAttribArray(this.depthShader.attributes.aNormal)}gl.depthFunc(gl.LESS),gl.depthMask(!0)},GaussFillMaterial.prototype.spreadXPass=function(){this.spreadXFBO.bind(),this.spreadXFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.disable(gl.BLEND),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.useProgram(this.spreadXShader.program),gl.disable(gl.DEPTH_TEST),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.activeTexture(gl.TEXTURE0+1),gl.bindTexture(gl.TEXTURE_2D,this.colorFBO.texture.glid),gl.uniform1i(this.spreadXShader.uniforms.uColor,1),gl.uniform2f(this.spreadXShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.uniform1fv(this.spreadXShader.uniforms["uKernel[0]"],this.gaussKernel),this.spreadXFBO.drawFullscreenQuad(this.spreadXShader)},GaussFillMaterial.prototype.spreadYPass=function(){this.spreadYFBO.bind(),this.spreadYFBO.setSize(Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.disable(gl.BLEND),gl.clearColor(0,0,0,0),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.useProgram(this.spreadYShader.program),gl.disable(gl.DEPTH_TEST),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.activeTexture(gl.TEXTURE0+1),gl.bindTexture(gl.TEXTURE_2D,this.spreadXFBO.texture.glid),gl.uniform1i(this.spreadYShader.uniforms.uColor,1),gl.uniform2f(this.spreadYShader.uniforms.uWindowSize,Potree.canvas.clientWidth,Potree.canvas.clientHeight),gl.uniform1fv(this.spreadYShader.uniforms["uKernel[0]"],this.gaussKernel),this.spreadYFBO.drawFullscreenQuad(this.spreadYShader)};var startTime=(new Date).getTime();GaussFillMaterial.prototype.normalizationPass=function(e){e.bind(),gl.clearColor(0,0,0,1),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.useProgram(this.normalizationShader.program),gl.disable(gl.DEPTH_TEST),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE),gl.activeTexture(gl.TEXTURE0+1),gl.bindTexture(gl.TEXTURE_2D,this.spreadYFBO.texture.glid),gl.uniform1i(this.normalizationShader.uniforms.uColor,1),e.drawFullscreenQuad(this.normalizationShader)},POCLoader.load=function(e){try{var t=new PointcloudOctree,r=new XMLHttpRequest;if(r.open("GET",e,!1),r.send(null),200===r.status||0===r.status){var n=JSON.parse(r.responseText);t.octreeDir=pathExists(n.octreeDir+"/r")?n.octreeDir:e+"/../"+n.octreeDir;var i=POCLoader.loadPointAttributes(n);t.setPointAttributes(i);var a=new PointcloudOctreeNode("r",t),o=new AABB;o.setDimensionByMinMax([n.boundingBox.lx,n.boundingBox.ly,n.boundingBox.lz],[n.boundingBox.ux,n.boundingBox.uy,n.boundingBox.uz]),a.setAABB(o),a.points=n.hierarchy[0][1],t.rootNode=a;for(var s=1;s<n.hierarchy.length;s++){var l=n.hierarchy[s][0],u=n.hierarchy[s][1],h=new PointcloudOctreeNode(l,t);h.points=u,t.rootNode.addChild(h);var d=parseInt(h.name.charAt(h.name.length-1)),p=POCLoader.createChildAABB(h.parent.aabb,d);h.setAABB(p)}}var f=new PointcloudOctreeSceneNode(t);return f}catch(c){console.log("loading failed: '"+e+"'"),console.log(c)}},POCLoader.loadPointAttributes=function(e){for(var t=e.pointAttributes,r=new PointAttributes,n=0;n<t.length;n++){var i=PointAttribute[t[n]];r.add(i)}return r},POCLoader.createChildAABB=function(e,t){var r=e.objectSpaceMin,n=e.objectSpaceMax,i=new AABB,a=V3.scale(V3.sub(n,r),.5),o=[a[0],0,0],s=[0,a[1],0],l=[0,0,a[2]],u=r,h=V3.add(r,a),i=new AABB;if(i.setDimensionByMinMax(u,h),1===t){var r=V3.add(i.min,l),n=V3.add(i.max,l);i.setDimensionByMinMax(r,n),i.setColor([0,0,1,1])}else if(3===t){var r=V3.add(V3.add(i.min,l),s),n=V3.add(V3.add(i.max,l),s);i.setDimensionByMinMax(r,n),i.setColor([1,1,0,1])}else if(0===t)i.setColor([1,0,0,1]);else if(2===t){var r=V3.add(i.min,s),n=V3.add(i.max,s);i.setDimensionByMinMax(r,n),i.setColor([0,1,0,1])}else if(5===t){var r=V3.add(V3.add(i.min,l),o),n=V3.add(V3.add(i.max,l),o);i.setDimensionByMinMax(r,n),i.setColor([1,1,1,1])}else if(7===t){var r=V3.add(i.min,a),n=V3.add(i.max,a);i.setDimensionByMinMax(r,n),i.setColor([0,0,0,1])}else if(4===t){var r=V3.add(i.min,o),n=V3.add(i.max,o);i.setDimensionByMinMax(r,n),i.setColor([1,0,1,1])}else if(6===t){var r=V3.add(V3.add(i.min,o),s),n=V3.add(V3.add(i.max,o),s);i.setDimensionByMinMax(r,n),i.setColor([0,1,1,1])}return i},PointAttributeNames.POSITION_CARTESIAN=0,PointAttributeNames.COLOR_PACKED=1,PointAttributeNames.COLOR_FLOATS_1=2,PointAttributeNames.COLOR_FLOATS_255=3,PointAttributeNames.NORMAL_FLOATS=4,PointAttributeNames.FILLER=5;var PointAttributeTypes={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var obj in PointAttributeTypes)PointAttributeTypes[i]=PointAttributeTypes[obj],i++;PointAttribute.POSITION_CARTESIAN=new PointAttribute(PointAttributeNames.POSITION_CARTESIAN,PointAttributeTypes.DATA_TYPE_FLOAT,3),PointAttribute.RGBA_PACKED=new PointAttribute(PointAttributeNames.COLOR_PACKED,PointAttributeTypes.DATA_TYPE_INT8,4),PointAttribute.COLOR_PACKED=PointAttribute.RGBA_PACKED,PointAttribute.RGB_PACKED=new PointAttribute(PointAttributeNames.COLOR_PACKED,PointAttributeTypes.DATA_TYPE_INT8,3),PointAttribute.NORMAL_FLOATS=new PointAttribute(PointAttributeNames.NORMAL_FLOATS,PointAttributeTypes.DATA_TYPE_FLOAT,3),PointAttribute.FILLER_1B=new PointAttribute(PointAttributeNames.FILLER,PointAttributeTypes.DATA_TYPE_UINT8,1),PointAttributes.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++
},PointAttributes.prototype.hasColors=function(){for(var e in this.attributes){var t=this.attributes[e];if(t.name===PointAttributeNames.COLOR_PACKED)return!0}return!1},PointAttributes.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===PointAttribute.NORMAL_FLOATS)return!0}return!1},PlyFileType.ASCII="ascii",PlyFileType.BINARY_LITTLE_ENDIAN="binary_little_endian",PlyFileType.BINARY_BIG_ENDIAN="binary_big_endian",PlyPropertyDataType.char=new PlyPropertyDataType("char",1),PlyPropertyDataType.uchar=new PlyPropertyDataType("uchar",1),PlyPropertyDataType.short=new PlyPropertyDataType("short",2),PlyPropertyDataType.ushort=new PlyPropertyDataType("ushort",2),PlyPropertyDataType.int=new PlyPropertyDataType("int",4),PlyPropertyDataType.uint=new PlyPropertyDataType("uint",4),PlyPropertyDataType.float=new PlyPropertyDataType("float",4),PlyPropertyDataType.double=new PlyPropertyDataType("double",8),PlyLoaderListener.prototype.finishedLoading=function(){},PlyLoaderListener.prototype.pointsLoaded=function(){},PlyLoaderListener.prototype.onProgress=function(){},PlyLoader.load=function(e){var t;null!=e.url?t=absolutePath(e.url):null!=e.file&&(t=e.file),null==e.pointsLoaded&&(e.pointsLoaded=function(){}),null==e.finishedLoading&&(e.finishedLoading=function(t){if(null!=e.parent){new PointCloudSceneNode("plyNode",e.parent,t)}}),null==e.fileLoadProgress&&(e.fileLoadProgress=function(){});var r=new PlyFile,n=createWebWorker("./src/loader/PlyLoaderWorker.js");n.onmessage=function(t){if("header"===t.data.type)r.header=PlyLoader.parseHeader(t.data.header);else if("progress"===t.data.type)e.pointsLoaded(t.data.pointsLoaded,r.header.elements[0].size);else if("result"===t.data.type){var n=t.data.buffer,i=t.data.aabb,a=r.header.elements[0],o=PlyLoader.pointAttributesFromProperties(a.properties,!0),s=n.byteLength/o.byteSize,l=new PointCloud("test",o);l.setVertexBufferData(n),l.size=s,l.aabb=new AABB;var u=V3.$(i.lx,i.ly,i.lz),h=V3.$(i.ux,i.uy,i.uz);l.aabb.setDimensionByMinMax(u,h),e.finishedLoading(l)}else"log"===t.data.type?console.log(t.data.message):"fileLoadProgress"===t.data.type?e.fileLoadProgress(t.data.percentage):alert(t.data)},n.postMessage(t)},PlyLoader.parseHeader=function(e){var t=e.split("\n"),r=new PlyHeader;r.byteSize=e.length;var n=new PlyElement("vertex");r.elements.push(n);for(var i=/^format (ascii|binary_little_endian).*/,a=/element (\w*) (\d*)/,o=/property (char|uchar|short|ushort|int|uint|float|double) (\w*)/;t.length>0;){var s=t.shift();if("ply"===s);else if(s.search(i)>=0){var l=s.match(i);r.type=PlyFileType[l[1].toUpperCase()]}else if(s.search(a)>=0){var l=s.match(a),u=l[1],h=parseInt(l[2]);if("vertex"!==u)throw"As of now, only ply files with 'vertex' as the first element are supported.";for(n.size=h;t[0].search(o)>=0;){var l=t.shift().match(o),u=l[2],d=PlyPropertyDataType[l[1]],p=new PlyProperty(u,d);n.properties.push(p)}break}}return r},PlyLoader.pointAttributesFromProperties=function(e,t){void 0===t&&(t=!1);for(var r=new PointAttributes,n=0;n<e.length;){var i=e[n];if("x"===i.name){var a=i,o=e[n+1],s=e[n+2];if("y"!==o.name||"z"!==s.name)throw"unsupported ply format";if(a.type.name+o.type.name+s.type.name!=="floatfloatfloat")throw"unsupported ply format";r.add(PointAttribute.POSITION_CARTESIAN),n+=3}else if("nx"===i.name){var a=i,o=e[n+1],s=e[n+2];if("ny"!==o.name||"nz"!==s.name)throw"unsupported ply format";if(a.type.name+o.type.name+s.type.name!=="floatfloatfloat")throw"unsupported ply format";r.add(PointAttribute.NORMAL_FLOATS),n+=3}else if("red"===i.name)if(null!=e[n+3]&&"alpha"===e[n+3].name){var l=i,u=e[n+1],h=e[n+2],d=e[n+3];if("green"!==u.name||"blue"!==h.name||"alpha"!==d.name)throw"unsupported ply format";if(l.type.name+u.type.name+h.type.name+d.type.name!=="ucharucharucharuchar")throw"unsupported ply format";r.add(PointAttribute.RGBA_PACKED),n+=4}else{var l=i,u=e[n+1],h=e[n+2];if("green"!==u.name||"blue"!==h.name)throw"unsupported ply format";if(l.type.name+u.type.name+h.type.name!=="ucharucharuchar")throw"unsupported ply format";r.add(t?PointAttribute.RGBA_PACKED:PointAttribute.RGB_PACKED),n+=3}else{if(!t){var p=new PointAttribute(PointAttributeNames.FILLER,PointAttributeTypes.DATA_TYPE_INT8,i.size);r.add(p)}n++}}return r},LRU.prototype.size=function(){return this.elements},LRU.prototype.contains=function(e){return null==this.items[e.id]},LRU.prototype.touch=function(e){var t;null==this.items[e.id]?(t=new LRUItem(e),t.previous=this.last,this.last=t,null!==t.previous&&(t.previous.next=t),this.items[e.id]=t,this.elements++,null===this.first&&(this.first=t),this.byteSize+=e.sizeInBytes()):(t=this.items[e.id],null===t.previous?null!==t.next&&(this.first=t.next,this.first.previous=null,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t):null===t.next||(t.previous.next=t.next,t.next.previous=t.previous,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t))},LRU.prototype.removeLRUItem=function(){if(null===this.first)return null;var e=this.first;return null!==e.next?(this.first=e.next,this.first.previous=null):(this.first=null,this.last=null),delete this.items[e.node.id],this.elements--,this.byteSize-=e.node.sizeInBytes(),e.node},LRU.prototype.getLRUItem=function(){if(null===this.first)return null;var e=this.first;return e.node},LRU.prototype.toString=function(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return e+="}",e+="("+this.size()+")"};var gl=null;Potree.shaderDir="resources/shader",Potree.includes=["libs/mjs/mjs.js","src/extensions/Array.js","src/extensions/mjs.js","src/extensions/String.js","src/extensions/ArrayBuffer.js","src/extensions/Float32Array.js","src/utils/utils.js","src/KeyListener.js","src/KeyCodes.js","src/MouseListener.js","src/Mouse.js","src/ResourceManager/TextureManager.js","src/ResourceManager/MaterialManager.js","src/shader/Shader.js","src/utils/Plane.js","src/utils/Frustum.js","src/rendering/Renderer.js","src/scenegraph/AABB.js","src/scenegraph/SceneNode.js","src/scenegraph/Camera.js","src/scenegraph/Scene.js","src/scenegraph/MeshNode.js","src/scenegraph/Light.js","src/scenegraph/Sphere.js","src/objects/Mesh.js","src/navigation/CamHandler.js","src/navigation/FreeFlightCamHandler.js","src/navigation/OrbitCamHandler.js","src/navigation/EarthCamHandler.js","src/Framebuffer.js","src/FramebufferFloat32.js","src/ResourceManager/ShaderManager.js","src/utils/MeshUtils.js","src/scenegraph/PointcloudOctreeSceneNode.js","src/scenegraph/PointCloudSceneNode.js","src/objects/PointCloud.js","src/objects/PointcloudOctreeNode.js","src/objects/PointcloudOctree.js","src/materials/Material.js","src/materials/WeightedPointSizeMaterial.js","src/materials/FixedPointSizeMaterial.js","src/materials/PointCloudMaterial.js","src/materials/FlatMaterial.js","src/materials/PhongMaterial.js","src/materials/FilteredSplatsMaterial.js","src/materials/GaussFillMaterial.js","src/loader/POCLoader.js","src/loader/PointAttributes.js","src/loader/PlyLoader.js","src/utils/LRU.js"],Potree.Settings={},Potree.Settings.showBoundingBoxes=!1,Potree.Settings.LOD=!0,Potree.Settings.LODMultiplicator=10,Potree.Settings.pointSize=1,Potree.Settings.backgroundColor=[0,0,0,1],Potree.Settings.showGrid=!1,Potree.Settings.frustumCulling=!0,Potree.gridSceneNode=null,Potree.canvas=null,Potree.initialized=!1,Potree.updateHandlers=[],Potree.drawHandlers=[];var renderer=null;Potree.fpsHistory=[],Potree.fps=0,Potree.importScripts=function(e){for(var t="",r=0;r<Potree.includes.length;r++){var n=Potree.includes[r];t+='<script type="text/javascript" src="'+e+"/"+n+'"></script>\n'}document.write(t)},Potree.isWebGLEnabled=function(e){for(var t=["webgl","experimental-webgl","moz-webgl","webkit-3d"],r=0;t.length>r;r++)try{if(gl=e.getContext(t[r],{antialias:!1}))break}catch(n){}return gl?!0:(console.log("No known OpenGL context detected! Is it enabled?"),!1)},Potree.init=function(e){if(Potree.initialized)return console.log("Potree has already been initialized"),!0;if(Potree.canvas=e,Potree.currentScene=new Scene("default"),!Potree.initGL()){var t=document.createElement("div"),r="<br>Could not create a WebGL context. ";return r+="<br><br>Try using <a href='http://www.mozilla.org' style='color: red'>Firefox</a> ",r+="or <a href='www.google.com/chrome/' style='color: red'>Chrome</a>.",r+="<br>Other WebGL enabled browsers are not supported but they might work as well.",t.innerHTML=r,t.style.fontSize="large",t.style.fontWeight="bold",t.style.color="#FFF",t.style.textShadow="black 0 0 4px, black 0 0 4px, black 0 0 4px, black 0 0 4px, black 0 0 4px, black 0 0 4px",t.style.textAlign="center",t.style.verticalAlign="bottom",t.style.height="100%",e.parentNode.replaceChild(t,e),!1}var n=/Firefox/i.test(navigator.userAgent)?"DOMMouseScroll":"mousewheel";document.attachEvent?document.attachEvent("on"+n,MouseListener.mouseWheel):document.addEventListener&&document.addEventListener(n,MouseListener.mouseWheel,!1),document.onkeydown=KeyListener.keyDown,document.onkeyup=KeyListener.keyUp,document.onkeypress=KeyListener.keyPress,document.onmousedown=MouseListener.mouseDown,document.onmouseup=MouseListener.mouseUp,document.onmousemove=MouseListener.mouseMove,Potree.camHandler=new FreeFlightCamHandler(Potree.currentScene.activeCamera),MouseListener.addListener(Potree.camHandler),e.onfocus=function(){KeyListener.addListener(Potree.camHandler),MouseListener.addListener(Potree.camHandler)},e.onblur=function(){KeyListener.removeListener(Potree.camHandler),MouseListener.removeListener(Potree.camHandler)},Potree.initialized=!0;new Shader("drawTexture","drawTexture.vs","drawTexture.fs"),new PointCloudMaterial("pointCloud"),new FlatMaterial("default");return setInterval(Potree.mainLoop,33),Potree.initialized},Object.defineProperty(Potree,"camHandler",{get:function(){return Potree._camHandler},set:function(e){KeyListener.removeListener(Potree._camHandler),MouseListener.removeListener(Potree._camHandler),Potree._camHandler=e,KeyListener.addListener(Potree._camHandler),MouseListener.addListener(Potree._camHandler)}}),Potree.initGL=function(){viewportWidth=Potree.canvas.width,viewportHeight=Potree.canvas.height;for(var e=["webgl","experimental-webgl","moz-webgl","webkit-3d"],t=0;e.length>t;t++)try{if(gl=Potree.canvas.getContext(e[t],{antialias:!1}))break}catch(r){}if(!gl)return console.log("No known OpenGL context detected! Is it enabled?"),!1;var n=Potree.Settings.backgroundColor;return gl.clearColor(n.r,n.g,n.b,n.a),gl.enable(gl.DEPTH_TEST),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA),!0},Potree.draw=function(){null==renderer&&(renderer=new Renderer(Potree.currentScene,Framebuffer.getSystemBuffer())),Potree.canvas.width=Potree.canvas.clientWidth,Potree.canvas.height=Potree.canvas.clientHeight;var e=renderer.scene.activeCamera;e.aspectRatio=Potree.canvas.clientWidth/Potree.canvas.clientHeight,renderer.viewport(0,0,Potree.canvas.clientWidth,Potree.canvas.clientHeight),renderer.render();for(var t=0;t<Potree.drawHandlers.length;t++){var r=Potree.drawHandlers[t];r()}},Potree.mainLoop=function(){Potree.calculateTimeSinceLastFrame(),Potree.update(timeSinceLastFrame),Potree.draw()};var lastLoopTime=null,timeSinceLastFrame=null;Potree.calculateTimeSinceLastFrame=function(){var e=(new Date).getTime();timeSinceLastFrame=null!=lastLoopTime?(e-lastLoopTime)/1e3:0,lastLoopTime=(new Date).getTime()},Potree.update=function(e){var t,r=1/e;Potree.fpsHistory.push(r),Potree.fpsHistory.length>10&&Potree.fpsHistory.splice(0,1);var n=0;for(t=0;t<Potree.fpsHistory.length;t++)n+=Potree.fpsHistory[t];for(n/=Potree.fpsHistory.length,Potree.fps=n.toFixed(2),Potree.currentScene.rootNode.addTime(e),PointcloudOctreeNode.nodesLoadedThisFrame=0,Potree.camHandler.addTime(e),t=0;t<Potree.updateHandlers.length;t++){var i=Potree.updateHandlers[t];i(e)}},Potree.shaderSources={"colouredPoint.fs":"\n\nprecision highp float;\n\nvarying vec3 vVertexColour;\nvarying vec3 vNormal;\n\nvoid main(void){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	if(c < 0.0){\n		discard;\n	}\n\n	gl_FragColor = vec4( vVertexColour.xyz, 1.0 );\n} ","colouredPoint.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec4 aVertexColour;\n//attribute vec3 aNormal;\n\nuniform mat4 world;\nuniform mat4 view;\nuniform mat4 proj;\nuniform float uOpacity;\nuniform float uPointSize;\nuniform float uPointSizeMultiplicator;\n\nvarying vec3 vVertexColour;\nvarying vec3 vNormal;\nvarying vec3 vWorldPos;\nvarying vec2 	vDepth; \n\nvoid main(void){\n	vec4 worldPos = world * vec4(aVertexPosition, 1.0);\n	vec4 pos = view * worldPos;\n	//vNormal = (worldPos * vec4(aNormal, 0.0)).xyz;\n	vWorldPos = worldPos.xyz;\n	\n	// calculate point size depending on the distance from viewport\n	// or rather: take a point in view space, translate it by {trans} along the x and y axis\n	// and then calculate the translated distance in projected space.  \n	// this distance, multiplied by a user defined factor, gives the desired point size.\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = proj * pos;\n	vec4 p2 = proj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSizeMultiplicator;\n	\n	gl_PointSize = ps;\n	gl_Position = proj * pos;;\n	vVertexColour = aVertexColour.xyz / 256.0;\n	vDepth = vec2( gl_Position.w, gl_Position.z / gl_Position.w * 0.5 + 0.5 );\n} ","drawTexture.fs":"\n\nprecision highp float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uTexture;\nuniform sampler2D uDepth;\nuniform float uWidth;\nuniform float uHeight;\n\nvoid main(void)\n{\n	vec4 col = texture2D(uTexture, vTextureCoord);\n	gl_FragColor = vec4(col.xyz, col.w);\n} ","drawTexture.vs":"\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec2 aTexcoord;\n\nvarying vec2 vTextureCoord;\n\n\nvoid main(void)\n{\n	gl_PointSize = 50.0;\n	gl_Position = vec4(aVertexPosition, 1.0);\n	vTextureCoord = aTexcoord;\n} ","fixedPointSize.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec4 aVertexColour;\n//attribute vec3 aNormal;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSize;\n\nvarying vec3 vVertexColour;\n//varying vec3 vNormal;\nvarying vec3 vWorldPos;\n// vDepth.x:	The linear depth. \n// vDepth.y:	DepthMap depth. \nvarying vec2 vDepth; \n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vec4 pos = uView * worldPos;\n	//vNormal = (worldPos * vec4(aNormal, 0.0)).xyz;\n	vWorldPos = worldPos.xyz;\n	\n	gl_PointSize = uPointSize;\n	gl_Position = uProj * pos;\n	vVertexColour = aVertexColour.xyz / 256.0;\n	vDepth = vec2( gl_Position.w, gl_Position.z / gl_Position.w * 0.5 + 0.5 );\n} ","flatShader.fs":"\nprecision highp float;\n\nuniform vec4 uColor; \n\nvoid main(void){\n	gl_FragColor = uColor;\n} ","flatShader.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\n\nvoid main(void){\n	vec4 pos = uProj * uView * uWorld * vec4(aVertexPosition, 1.0);\n	gl_Position = pos;\n} ","phong.fs":"\nprecision highp float;\n\nvarying vec3 normal;\n\nuniform vec4 uColor; \n\nvoid main(void){\n	gl_FragColor = uColor;\n	gl_FragColor = vec4(normal, 1.0);\n//	gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);\n} ","phong.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec3 aVertexNormal;\n\nvarying vec3 normal;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\n\nvoid main(void){\n	vec4 pos = uProj * uView * uWorld * vec4(aVertexPosition, 1.0);\n	normal = (uWorld * vec4(aVertexNormal, 0.0)).xyz;\n	gl_Position = pos;\n	gl_PointSize = 10.0;\n} ","pointSize.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec4 aVertexColour;\nattribute vec3 aNormal;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSizeMultiplicator;\n\nvarying vec3 vVertexColour;\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vec4 pos = uView * worldPos;\n	\n	// calculate point size depending on the distance from viewport\n	// or rather: take a point in view space, translate it by {trans} along the x and y axis\n	// and then calculate the translated distance in projected space.  \n	// this distance, multiplied by a user defined factor, gives the desired point size.\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSizeMultiplicator;\n	\n	gl_PointSize = ps;\n	gl_Position = uProj * pos;\n	vVertexColour = aVertexColour.xyz / 256.0;\n} ","filteredSplats/filteredSplatsAttributePass.vs":"\n\nprecision highp float;\n\nattribute vec3 	aVertexPosition;\nattribute vec4 	aVertexColour;\nattribute vec3 	aNormal;\n\nuniform float 	uNear;\nuniform float 	uFar;\nuniform mat4 	uWorld;\nuniform mat4 	uView;\nuniform mat4 	uProj;\nuniform float 	uPointSize;\n\nvarying vec3 	vVertexColour;\nvarying vec3 	vPos;\nvarying vec3 	vNormal;\n\n// calculate point size depending on the distance from viewport\n// or rather: take a point in view space, translate it by {trans} along the x and y axis\n// and then calculate the translated distance in projected space.  \n// this distance, multiplied by a user defined factor, gives the desired point size.\nfloat pointSize(vec4 pos){\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSize;\n	\n	return ps;\n}\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vPos = worldPos.xyz;\n	vec4 pos = uView * worldPos;\n	\n	vVertexColour = aVertexColour.xyz / 256.0;\n	vNormal = (uWorld*vec4(aNormal, 0.0)).xyz;\n	\n	gl_PointSize = pointSize(pos);\n	\n	// calculate xy and linear z\n	pos = uProj * pos;\n	float w = pos.w;\n	pos = pos / w;\n	pos.z = 2.0*((w-uNear) / uFar)-1.0;\n	gl_Position = pos;\n	\n} \n\n","filteredSplats/filteredSplatsColorAttributePass.fs":"\n\nprecision highp float;\n\nvarying vec3 	vVertexColour;\n\nfloat getDistance(){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	return c;\n}\n\nvoid main(void){\n	float c = getDistance();\n	if(c <= 0.0){\n		discard;\n	}\n\n	float weight = pow(c+0.2, 40.0);\n\n	gl_FragColor = vec4( weight * vVertexColour, weight );\n} \n\n\n\n","filteredSplats/filteredSplatsDepthPass.fs":"\n\nprecision highp float;\n\nvarying vec3	vPos;\n\nvoid main(void){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	if(c < 0.0){\n		discard;\n	}\n	\n	vec3 id = vec3(1.0,1.0,1.0);\n	gl_FragColor = vec4(vPos, 1.0);\n} ","filteredSplats/filteredSplatsDepthPass.vs":"\nprecision highp float;\n\nattribute vec3 aVertexPosition;\n\nuniform float uNear;\nuniform float uFar;\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSize;\nuniform float uBlendDepth;\n\nvarying vec3 	vPos;\n\n// calculate point size depending on the distance from viewport\n// or rather: take a point in view space, translate it by {trans} along the x and y axis\n// and then calculate the translated distance in projected space.  \n// this distance, multiplied by a user defined factor, gives the desired point size.\nfloat pointSize(vec4 pos){\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSize;\n	\n	return ps;\n}\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vPos = (uWorld * vec4(aVertexPosition, 1.0)).xyz;\n	vec4 pos = uView * worldPos;\n	\n	gl_PointSize = pointSize(pos);\n	pos = uProj * pos;\n	float w = pos.w;\n	float depth = pos.z;\n	pos = pos / w;\n	pos.z = 2.0*((w+uBlendDepth-uNear) / uFar)-1.0;\n	gl_Position = pos;\n} \n","filteredSplats/filteredSplatsNormalAttributePass.fs":"\nprecision highp float;\n\n//varying vec3 	vVertexColour;\nvarying vec3 	vNormal;\n//varying vec3 	vViewNormal;\n//varying vec3 	vPos;\n//varying vec3	vViewPos;\n//varying vec3	vViewTangent1;\n//varying vec3	vViewTangent2;\n\n//uniform vec2	uWindowSize;\n//uniform vec2 	uNearWindowSize;\n//uniform float	uNear;\n\n//float getDistance(){\n//	float u = 2.0*(gl_PointCoord.x - 0.5);\n//	float v = 2.0*(gl_PointCoord.y - 0.5);\n//	vec2 uv = vec2(u,v);\n//	\n//	vec2 a = normalize(vec2(-vViewNormal.y, vViewNormal.x));\n//	vec2 b = normalize(vec2(vViewNormal.x, vViewNormal.y));\n//	b = b * (1.0/vViewNormal.z);\n//	\n//	float val = pow(dot(a, uv), 2.0) + pow(dot(b, uv), 2.0);\n//	return 1.0 - val;\n//}\n\nfloat getDistance(){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	return c;\n}\n\n//float getDistance(){\n//	vec3 N = normalize(vViewNormal);\n//	vec3 P = vec3(0.0, 0.0, 0.0);\n//	vec3 Cc = vViewPos;\n//	vec3 T1 = vViewTangent1;\n//	vec3 T2 = vViewTangent2;\n//	T1 = N.yzx;\n//	T2 = N.zxy;\n//	\n//	float u = (gl_FragCoord.x / uWindowSize.x)-0.5;\n//	float v = (gl_FragCoord.y / uWindowSize.y)-0.5;\n////	float u = 2.0*(gl_PointCoord.x - 0.5);\n////	float v = 2.0*((1.0-gl_PointCoord.y)-0.5);\n//	\n//	vec3 V = vec3(0,0,0);\n//	V.x = u*uNearWindowSize.x;\n//	V.y = v*uNearWindowSize.y;\n//	V.z = -uNear;\n//	V = normalize(V);\n//	\n//	float d = -dot(N, Cc);\n////	d = 2.0;\n//	float t = -(dot(P,N)+d)/dot(V, N);\n//	t = max(t, 0.0);\n//	vec3 I = P + V*t - Cc;\n////	\n//	float val = pow(dot(T1, I), 2.0) + pow(dot(T2, I), 2.0);\n//	val = val *	 5000.0;\n//	\n//	return 1.0 - val;\n//}\n\nvoid main(void){\n	float c = getDistance();\n	if(c <= 0.0){\n		discard;\n	}\n\n	// calculate weight\n//	float d = 5.0*(c + 0.5);\n//	float weight = exp(d*d);\n	\n	// interpolate normals smoother than color\n	float weight = pow(c, 2.0);\n//	float weight = pow(c+0.2, 40.0);\n\n	gl_FragColor = vec4( weight * vNormal, weight );\n	\n} \n\n\n\n","filteredSplats/filteredSplatsShadingPass.fs":"\n\nprecision highp float;\n\nuniform sampler2D uNormal;\nuniform sampler2D uColor;\nuniform sampler2D uPosition;\n\nuniform vec3 uLightPos;\nuniform vec3 uLightColor;\nuniform int uIlluminationMode;\n\nvarying vec2 vTextureCoord;\n\nvec3 phongIllumination(vec3 N, vec3 color, vec3 pos){\n	vec3 L = normalize(uLightPos - pos);\n	float nDotL = clamp(dot(N, L), 0.0, 1.0);\n	vec3 diffuse = uLightColor * color * (nDotL*0.8 + 0.2);\n	vec3 ambient = vec3(0.0,0.0,0.0);\n	\n	return diffuse;\n}\n\nvoid main(void){\n	vec4 weightedColor = texture2D(uColor, vTextureCoord);\n	if(weightedColor.a <= 0.0){\n		discard;\n	}\n\n	vec4 weightedNormal = texture2D( uNormal, vTextureCoord );\n	vec3 N = normalize(weightedNormal.xyz / weightedNormal.w);\n	vec3 color = weightedColor.rgb / weightedColor.a;\n	vec3 pos = texture2D(uPosition, vTextureCoord).xyz;	\n\n	if(uIlluminationMode == 0){\n		gl_FragColor = vec4(color, 1.0);\n	}else if(uIlluminationMode == 1){\n		gl_FragColor = vec4(phongIllumination(N, color, pos), 1.0);\n	}else if(uIlluminationMode == 2){\n		gl_FragColor = vec4(N, 1.0);\n	}else if(uIlluminationMode == 3){\n		gl_FragColor = vec4(pos, 1.0);\n	}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n","gaussFill/gaussFillDepthPass.fs":"\nprecision highp float;\n\nvoid main(void){\n	gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n} ","gaussFill/gaussFillDepthPass.vs":"\nprecision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec3 aNormal;\n\nuniform float uNear;\nuniform float uFar;\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSize;\nuniform float uBlendDepth;\n\n// calculate point size depending on the distance from viewport\n// or rather: take a point in view space, translate it by {trans} along the x and y axis\n// and then calculate the translated distance in projected space.  \n// this distance, multiplied by a user defined factor, gives the desired point size.\nfloat pointSize(vec4 pos){\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n//	ps = ps * uPointSize;\n	\n	return ps;\n}\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n//	vPos = (uWorld * vec4(aVertexPosition, 1.0)).xyz;\n	vec4 pos = uView * worldPos;\n	\n	gl_PointSize = pointSize(pos);\n	pos = uProj * pos;\n	float w = pos.w;\n	float depth = pos.z;\n	pos = pos / w;\n	pos.z = 2.0*((w+uBlendDepth-uNear) / uFar)-1.0;\n	gl_Position = pos;\n} \n","gaussFill/gaussFillNormalizationPass.fs":"\n\nprecision highp float;\n\nuniform sampler2D uColor;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n	vec4 color = texture2D(uColor, vTextureCoord);\n	color = color / color.a;\n	gl_FragColor = color;\n//	gl_FragColor = vec4(0.0, color.a, 0.0, 1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n","gaussFill/gaussFillPointsPass.fs":"\nprecision highp float;\n\nvarying vec3 	vVertexColour;\n\nvoid main(void){\n	/*float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	if(c < 0.0){\n		discard;\n	}*/\n	\n	gl_FragColor = vec4(vVertexColour, 1.0);\n} \n\n\n\n","gaussFill/gaussFillPointsPass.vs":"\nprecision highp float;\n\nattribute vec3 	aVertexPosition;\nattribute vec4 	aVertexColour;\n\nuniform mat4 	uWorld;\nuniform mat4 	uView;\nuniform mat4 	uProj;\nuniform float	uNear;\nuniform float 	uFar;\nuniform float	uPointSize;\n\nvarying vec3 	vVertexColour;\n\nfloat pointSize(vec4 pos){\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * 0.3;\n	\n	return ps;\n}\n\nvoid main(void){\n	vec4 pos = uView * uWorld * vec4(aVertexPosition, 1.0);\n	vVertexColour = aVertexColour.xyz / 256.0;\n	//float ps = pointSize(pos);\n	\n	pos = uProj * pos;\n	float w = pos.w;\n	float depth = pos.z;\n	pos = pos / w;\n	pos.z = 2.0*((w-uNear) / uFar)-1.0;\n	\n	gl_PointSize = 1.0;\n	//gl_PointSize = ps;\n	gl_Position = pos;\n	\n} \n\n","gaussFill/gaussFillSpreadXPass.fs":"\n// gauss kernel, r = 3:  0.034793, 0.102006, 0.216137, 0.294128, 0.216137, 0.102006, 0.034793\n// gauss kernel, r = 5:  0.0216149, 0.0439554, 0.0778778, 0.118718, 0.153857, 0.167953, 0.153857, 0.118718, 0.0778778, 0.0439554, 0.0216149\n\nprecision highp float;\n\nuniform sampler2D uColor;\nuniform vec2 uWindowSize;\nuniform float uKernel[11];\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n\n	vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n	for(int i = 0; i < 11; i++){\n		float j = float(i)-5.0;\n		\n		vec2 offset = vec2(j/uWindowSize.x, 0.0);\n		color = color + uKernel[i] * texture2D(uColor, vTextureCoord + offset);\n	}\n	\n	gl_FragColor = color;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n","gaussFill/gaussFillSpreadYPass.fs":"\nprecision highp float;\n\nuniform sampler2D uColor;\nuniform vec2 uWindowSize;\nuniform float uKernel[11];\n\nvarying vec2 vTextureCoord;\n\nvoid main(void){\n	vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n	for(int i = 0; i < 11; i++){\n		float j = float(i)-5.0;\n		\n		vec2 offset = vec2(0.0, j/uWindowSize.y);\n		color = color + uKernel[i] * texture2D(uColor, vTextureCoord + offset);\n	}\n\n	gl_FragColor = color;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n","weightedPoints/weightedPointsDepthAsRGBA.fs":"\nprecision highp float;\n\nvarying float vDepth;\n\n/**\n * from http://stackoverflow.com/questions/9882716/packing-float-into-vec4-how-does-this-code-work\n */\nvec4 pack_depth(const in float depth)\n{\n    const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n    vec4 res = fract(depth * bit_shift);\n    res -= res.xxyz * bit_mask;\n    return res;\n}\n\nvoid main(void){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	if(c < 0.0){\n		discard;\n	}\n\n	gl_FragColor = pack_depth(vDepth);\n} ","weightedPoints/weightedPointsDepthAsRGBA.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSizeMultiplicator;\n\nvarying float vDepth;\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vec4 pos = uView * worldPos;\n	\n	// calculate point size depending on the distance from viewport\n	// or rather: take a point in view space, translate it by {trans} along the x and y axis\n	// and then calculate the translated distance in projected space.  \n	// this distance, multiplied by a user defined factor, gives the desired point size.\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSizeMultiplicator;\n	\n	gl_PointSize = ps;\n	gl_Position = uProj * pos;\n	\n	vDepth = gl_Position.z / gl_Position.w;\n} ","weightedPoints/weightedPointsPosition.fs":"\n\nprecision highp float;\n\nvarying vec3 vPos;\n\nvoid main(void){\n	float a = pow(2.0*(gl_PointCoord.x - 0.5), 2.0);\n	float b = pow(2.0*(gl_PointCoord.y - 0.5), 2.0);\n	float c = 1.0 - (a + b);\n	\n	if(c < 0.0){\n		discard;\n	}\n\n	gl_FragColor = vec4( vPos, 1.0 );\n} ","weightedPoints/weightedPointsPosition.vs":"\n\nprecision highp float;\n\nattribute vec3 aVertexPosition;\n\nuniform mat4 uWorld;\nuniform mat4 uView;\nuniform mat4 uProj;\nuniform float uPointSizeMultiplicator;\n\nvarying vec3 vPos;\n\nvoid main(void){\n	vec4 worldPos = uWorld * vec4(aVertexPosition, 1.0);\n	vec4 pos = uView * worldPos;\n	\n	// calculate point size depending on the distance from viewport\n	// or rather: take a point in view space, translate it by {trans} along the x and y axis\n	// and then calculate the translated distance in projected space.  \n	// this distance, multiplied by a user defined factor, gives the desired point size.\n	float trans = 0.5 + max(length(pos)-10.0, 0.0) / 30.0;\n	vec4 p1 = uProj * pos;\n	vec4 p2 = uProj * (pos + vec4(trans,trans,0.0,0.0));\n	p1.xyz = p1.xyz / p1.w;\n	p2.xyz = p2.xyz / p1.w;\n	vec2 dist = p1.xy - p2.xy;\n	float ps = length(dist) * 30.0;\n	ps = max(3.0, ps);\n	ps = ps * uPointSizeMultiplicator;\n	\n	gl_PointSize = ps;\n	gl_Position = uProj * pos;\n	vPos = worldPos.xyz;\n} "},Potree.webWorkerSources={"./src/loader/PlyLoaderWorker.js":'\n\n///**\n// * Some types of possible point attributes\n// * \n// * @class\n// */\n//var PointAttributeNames = {\n//	POSITION_CARTESIAN 	: 0,	// float x, y, z;\n//	COLOR_PACKED		: 1,	// byte r, g, b, a; 	I = [0,1]\n//	COLOR_FLOATS_1		: 2,	// float r, g, b; 		I = [0,1]\n//	COLOR_FLOATS_255	: 3,	// float r, g, b; 		I = [0,255]\n//	NORMAL_FLOATS		: 4,  	// float x, y, z;\n//	FILLER				: 5\n//};\n//\n//var i = 0;\n//for(var obj in PointAttributeNames){\n//	PointAttributeNames[i] = PointAttributeNames[obj];\n//	i++;\n//}\n\nfunction PointAttributeNames(){\n	\n}\n\nPointAttributeNames.POSITION_CARTESIAN 	= 0;	// float x, y, z;\nPointAttributeNames.COLOR_PACKED		= 1;	// byte r, g, b, a; 	I = [0,1]\nPointAttributeNames.COLOR_FLOATS_1		= 2;	// float r, g, b; 		I = [0,1]\nPointAttributeNames.COLOR_FLOATS_255	= 3;	// float r, g, b; 		I = [0,255]\nPointAttributeNames.NORMAL_FLOATS		= 4;  	// float x, y, z;\nPointAttributeNames.FILLER				= 5;\n/**\n * Some types of possible point attribute data formats\n * \n * @class\n */\nvar PointAttributeTypes = {\n	DATA_TYPE_DOUBLE	: {ordinal : 0, size: 8},\n	DATA_TYPE_FLOAT		: {ordinal : 1, size: 4},\n	DATA_TYPE_INT8		: {ordinal : 2, size: 1},\n	DATA_TYPE_UINT8		: {ordinal : 3, size: 1},\n	DATA_TYPE_INT16		: {ordinal : 4, size: 2},\n	DATA_TYPE_UINT16	: {ordinal : 5, size: 2},\n	DATA_TYPE_INT32		: {ordinal : 6, size: 4},\n	DATA_TYPE_UINT32	: {ordinal : 7, size: 4},\n	DATA_TYPE_INT64		: {ordinal : 8, size: 8},\n	DATA_TYPE_UINT64	: {ordinal : 9, size: 8}\n};\n\nvar i = 0;\nfor(var obj in PointAttributeTypes){\n	PointAttributeTypes[i] = PointAttributeTypes[obj];\n	i++;\n}\n\n/**\n * A single point attribute such as color/normal/.. and its data format/number of elements/... \n * \n * @class\n * @param name \n * @param type\n * @param size\n * @returns\n */\nfunction PointAttribute(name, type, numElements){\n	this.name = name;\n	this.type = type; \n	this.numElements = numElements;\n	this.byteSize = this.numElements * this.type.size;\n}\n\nPointAttribute.POSITION_CARTESIAN = new PointAttribute(\n		PointAttributeNames.POSITION_CARTESIAN,\n		PointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\nPointAttribute.RGBA_PACKED = new PointAttribute(\n		PointAttributeNames.COLOR_PACKED,\n		PointAttributeTypes.DATA_TYPE_INT8, 4);\n\nPointAttribute.COLOR_PACKED = PointAttribute.RGBA_PACKED;\n\nPointAttribute.RGB_PACKED = new PointAttribute(\n		PointAttributeNames.COLOR_PACKED,\n		PointAttributeTypes.DATA_TYPE_INT8, 3);\n\nPointAttribute.NORMAL_FLOATS = new PointAttribute(\n		PointAttributeNames.NORMAL_FLOATS,\n		PointAttributeTypes.DATA_TYPE_FLOAT, 3);\n\nPointAttribute.FILLER_1B = new PointAttribute(\n		PointAttributeNames.FILLER,\n		PointAttributeTypes.DATA_TYPE_UINT8, 1);\n\n/**\n * Ordered list of PointAttributes used to identify how points are aligned in a buffer.\n * \n * @class\n * \n */\nfunction PointAttributes(pointAttributes){\n	this.attributes = new Array();\n	this.byteSize = 0;\n	this.size = 0;\n	\n	if(pointAttributes != null){\n		// does not work in chrome v24\n//		for(var pointAttribute of pointAttributes){\n//			this.attributes.push(pointAttribute);\n//			this.byteSize += pointAttribute.byteSize;\n//			this.size++;\n//		}\n		\n		for(var name in pointAttributes){\n			var pointAttribute = pointAttributes[name];\n			this.attributes.push(pointAttribute);\n			this.byteSize += pointAttribute.byteSize;\n			this.size++;\n		}\n	}\n}\n\nPointAttributes.prototype.add = function(pointAttribute){\n	this.attributes.push(pointAttribute);\n	this.byteSize += pointAttribute.byteSize;\n	this.size++;\n};\n\nPointAttributes.prototype.hasColors = function(){\n	for(var name in this.attributes){\n		var pointAttribute = this.attributes[name];\n		if(pointAttribute.name === PointAttributeNames.COLOR_PACKED){\n			return true;\n		}\n	}\n	\n	return false;\n};\n\nPointAttributes.prototype.hasNormals = function(){\n	for(var name in this.attributes){\n		var pointAttribute = this.attributes[name];\n		if(pointAttribute === PointAttribute.NORMAL_FLOATS){\n			return true;\n		}\n	}\n	\n	return false;\n};\n\n\n\n\n\n/**\n * List of possible ply file types\n * \n * @class\n */\nfunction PlyFileType(){}\nPlyFileType.ASCII = "ascii";\nPlyFileType.BINARY_LITTLE_ENDIAN = "binary_little_endian";\nPlyFileType.BINARY_BIG_ENDIAN = "binary_big_endian";\n\n/**\n * represents a property definition in a ply file\n * \n * @class\n * \n */\nfunction PlyProperty(name, type){\n	this.name = name;\n	this.type = type;\n}\n\n\n/**\n * \n * @class\n */\nfunction PlyPropertyDataType(name, size){\n	this.name = name;\n	this.size = size;\n}\n\n/**\n * represent an element in a ply file. (such as vertex/face/...)\n * \n * @class\n * \n */\nfunction PlyElement(name){\n	this.name = name;\n	this.properties = new Array();\n	this.size = 0;\n}\n\nPlyPropertyDataType.char   = new PlyPropertyDataType("char", 1);\nPlyPropertyDataType.uchar  = new PlyPropertyDataType("uchar", 1);\nPlyPropertyDataType.short  = new PlyPropertyDataType("short", 2);\nPlyPropertyDataType.ushort = new PlyPropertyDataType("ushort", 2);\nPlyPropertyDataType.int    = new PlyPropertyDataType("int", 4);\nPlyPropertyDataType.uint   = new PlyPropertyDataType("uint", 4);\nPlyPropertyDataType.float  = new PlyPropertyDataType("float", 4);\nPlyPropertyDataType.double = new PlyPropertyDataType("double", 8);\n\n/**\n * holds ply header data\n * \n * @class\n * \n */\nfunction PlyHeader(){\n	this.type = null;\n	this.byteSize = 0;\n	this.elements = new Array();\n}\n\n/**\n * Contains ply header and a buffer with byte-data \n * \n * @class\n */\nfunction PlyFile(buffer){\n	this.buffer = buffer;\n	this.header = new PlyHeader();\n}\n\n/**\n * This listener is called while a ply file is beeing loaded\n * \n * @class\n */\nfunction PlyLoaderListener(){\n	\n}\n\nPlyLoaderListener.prototype.finishedLoading = function(pointcloud){\n	\n};\n\nPlyLoaderListener.prototype.pointsLoaded = function(numLoadedPoints, numPoints){\n	\n};\n\nPlyLoaderListener.prototype.onProgress = function(progress){\n	\n};\n\n/**\n * \n * @class\n */\nfunction PlyLoader(){\n	\n}\n\n/**\n * Loads source in a background task. \n * Once loading is finished, listener.finishedLoading(pointCloud) is called.\n */\nPlyLoader.load = function(arg){\n	var source;\n	if(arg.url != null){\n		source = absolutePath(arg.url);\n	}else if(arg.file != null){\n		source = arg.file;\n	}\n	\n	if(arg.pointsLoaded == null) arg.pointsLoaded = function(){};\n	if(arg.finishedLoading == null) arg.finishedLoading = function(pointCloud){\n		if(arg.parent != null){\n			var node = new PointCloudSceneNode("plyNode", arg.parent, pointCloud);\n		}\n	};\n	if(arg.fileLoadProgress == null) arg.fileLoadProgress = function(){};\n	\n	\n	var plyFile = new PlyFile();\n//	var worker = new Worker("src/loader/PlyLoaderWorker.js");\n	var worker = createWebWorker("./src/loader/PlyLoaderWorker.js");\n	worker.onmessage = function(event){\n		if(event.data.type === "header"){\n			plyFile.header = PlyLoader.parseHeader(event.data.header);\n		}else if(event.data.type === "progress"){\n			arg.pointsLoaded(event.data.pointsLoaded, plyFile.header.elements[0].size);\n		}else if(event.data.type === "result"){\n			var pointBuffer = event.data.buffer;\n			var aabb = event.data.aabb;\n			var vertexElement = plyFile.header.elements[0];\n			var pointAttributes = PlyLoader.pointAttributesFromProperties(vertexElement.properties, true);\n			var numPoints = pointBuffer.byteLength / pointAttributes.byteSize;\n			var pointCloud = new PointCloud("test", pointAttributes);\n			pointCloud.setVertexBufferData(pointBuffer);\n			pointCloud.size = numPoints;\n			pointCloud.aabb = new AABB();\n			var min = V3.$(aabb.lx, aabb.ly, aabb.lz);\n			var max = V3.$(aabb.ux, aabb.uy, aabb.uz);\n			pointCloud.aabb.setDimensionByMinMax(min, max);\n			\n			arg.finishedLoading(pointCloud);\n		}else if(event.data.type === "log"){\n			console.log(event.data.message);\n		}else if(event.data.type === "fileLoadProgress"){\n			arg.fileLoadProgress(event.data.percentage);\n		}else{\n			alert(event.data);\n		}\n	};\n	worker.postMessage(source);\n};\n\nPlyLoader.parseHeader = function PlyLoader_parseHeader(header){\n	var lines = header.split(\'\\n\');\n	var plyHeader = new PlyHeader();\n	plyHeader.byteSize = header.length;\n	var vertexElement = new PlyElement("vertex");\n	plyHeader.elements.push(vertexElement);\n	\n	var formatPattern = /^format (ascii|binary_little_endian).*/;\n	var elementPattern = /element (\\w*) (\\d*)/;\n	var propertyPattern = /property (char|uchar|short|ushort|int|uint|float|double) (\\w*)/;\n	\n	while(lines.length > 0){\n	//for(var i = 0; i < lines.length; i++){\n		var line = lines.shift();\n		\n		if(line === "ply"){\n		}else if(line.search(formatPattern) >= 0){\n			var result = line.match(formatPattern);\n			plyHeader.type = PlyFileType[result[1].toUpperCase()];\n		}else if(line.search(elementPattern) >= 0){\n			var result = line.match(elementPattern);\n			var name = result[1];\n			var count = parseInt(result[2]);\n			\n			if(name !== "vertex"){\n				throw "As of now, only ply files with \'vertex\' as the first element are supported.";\n			}\n			\n			vertexElement.size = count;\n			// handle properties\n			while(lines[0].search(propertyPattern) >= 0){\n				var result = lines.shift().match(propertyPattern);\n				var name = result[2];\n				var type = PlyPropertyDataType[result[1]];\n				var property = new PlyProperty(name, type);\n				vertexElement.properties.push(property);\n			}\n			break;\n		}\n	}\n	\n	return plyHeader;\n};\n\nPlyLoader.pointAttributesFromProperties = function PlyLoader_pointAttributesFromProperties(properties, forTargetBuffer){\n	if(forTargetBuffer === undefined){\n		forTargetBuffer = false;\n	}\n	var pointAttributes = new PointAttributes();\n	var i = 0; \n	while(i < properties.length){\n		var property = properties[i];\n		\n		if(property.name === "x"){\n			var p0 = property;\n			var p1 = properties[i+1];\n			var p2 = properties[i+2];\n			\n			if(p1.name !== "y" || p2.name !== "z"){\n				throw "unsupported ply format";\n			}\n			\n			if((p0.type.name + p1.type.name + p2.type.name) !== "floatfloatfloat"){\n				throw "unsupported ply format";\n			}\n			\n			pointAttributes.add(PointAttribute.POSITION_CARTESIAN);\n			i+=3;\n		}else if(property.name === "nx"){\n			var p0 = property;\n			var p1 = properties[i+1];\n			var p2 = properties[i+2];\n			\n			if(p1.name !== "ny" || p2.name !== "nz"){\n				throw "unsupported ply format";\n			}\n			\n			if((p0.type.name + p1.type.name + p2.type.name) !== "floatfloatfloat"){\n				throw "unsupported ply format";\n			}\n			\n			pointAttributes.add(PointAttribute.NORMAL_FLOATS);\n			i+=3;\n		}else if(property.name === "red"){\n			if(properties[i+3] != null && properties[i+3].name === "alpha"){\n				var c0 = property;\n				var c1 = properties[i+1];\n				var c2 = properties[i+2];\n				var c3 = properties[i+3];\n				\n				if(c1.name !== "green" || c2.name !== "blue" || c3.name !== "alpha"){\n					throw "unsupported ply format";\n				}\n				\n				if((c0.type.name + c1.type.name + c2.type.name + c3.type.name) !== "ucharucharucharuchar"){\n					throw "unsupported ply format";\n				}\n				\n				pointAttributes.add(PointAttribute.RGBA_PACKED);\n				i += 4;\n			}else{\n				var c0 = property;\n				var c1 = properties[i+1];\n				var c2 = properties[i+2];\n				\n				if(c1.name !== "green" || c2.name !== "blue"){\n					throw "unsupported ply format";\n				}\n				\n				if((c0.type.name + c1.type.name + c2.type.name) !== "ucharucharuchar"){\n					throw "unsupported ply format";\n				}\n				\n				if(forTargetBuffer){\n					pointAttributes.add(PointAttribute.RGBA_PACKED);\n				}else{\n					pointAttributes.add(PointAttribute.RGB_PACKED);\n				}\n				i+=3;\n			}\n			\n		}else{\n			\n			if(!forTargetBuffer){\n				var attribute = new PointAttribute(PointAttributeNames.FILLER, \n						PointAttributeTypes.DATA_TYPE_INT8, property.size);\n				pointAttributes.add(attribute);\n			}\n			i++;\n		}\n	}\n	\n	return pointAttributes;\n};\n\n\n\n// importScripts is only necessary and will only work in the non-single-file version of potree\ntry{\n	importScripts("PointAttributes.js");\n	importScripts("PlyLoader.js");\n}catch(e){\n}\n\nself.onmessage = function(message){\n//	postMessage("onmessage");\n	var plyFile = message.data;\n	PlyBinaryWorker.load(plyFile);\n};\n\n/**\n * A worker thread class that loads data from ply files in the background.\n * \n * @class\n * \n */\nfunction PlyBinaryWorker(){\n	\n}\n\nPlyBinaryWorker.load = function PlyLoader_load(source){\n//	postMessage("load");\n	if(source instanceof Blob){\n		PlyBinaryWorker.loadFromFile(source);\n	}else if(source instanceof ArrayBuffer){\n		PlyBinaryWorker.loadFromBuffer(source);\n	}else if(typeof source === \'string\'){\n		PlyBinaryWorker.loadFromUrl(source);\n	}\n//	postMessage("sis: " + (source instanceof String));\n};\n\nPlyBinaryWorker.loadFromFile = function(source){\n	var reader = new FileReaderSync();\n	var buffer = reader.readAsArrayBuffer(source);\n	PlyBinaryWorker.loadFromBuffer(buffer);\n};\n\nPlyBinaryWorker.loadFromUrl = function(source){\n//	postMessage("fromUrl");\n	var xhr = new XMLHttpRequest();\n	xhr.open(\'GET\', source, true);\n	xhr.overrideMimeType(\'text/plain; charset=x-user-defined\');\n	xhr.responseType = \'arraybuffer\';\n	xhr.onprogress = function(evt){\n		var pFinished = 100 * (evt.loaded / evt.total);\n		postMessage({"type": "fileLoadProgress", "percentage": pFinished});\n	}\n	\n	xhr.onreadystatechange = function(){\n		if(xhr.readyState === 4){\n			if (xhr.status === 200 || xhr.status === 0) {\n				var buffer = xhr.response;\n				PlyBinaryWorker.loadFromBuffer(buffer);\n			} else {\n				// post message failed\n			}\n		}else if(xhr.readyState === 3){\n			\n			\n		}\n	};\n	\n	try{\n		xhr.send(null);\n	}catch(e){\n		// post message failed\n	}\n};\n\nPlyBinaryWorker.loadFromAscii = function loadFromAscii(plyFile){\n	var vertexElement = plyFile.header.elements[0];\n	var plyPointAttributes = PlyLoader.pointAttributesFromProperties(vertexElement.properties);\n	var pointAttributes = PlyLoader.pointAttributesFromProperties(vertexElement.properties, true);\n	var pointBuffer = new ArrayBuffer(pointAttributes.byteSize * vertexElement.size);\n	var pointDataView = new DataView(pointBuffer);\n	var plyBuffer = plyFile.buffer;\n	var plyBufferUint8 = new Uint8Array(plyBuffer, plyFile.header.byteSize);\n	\n	var currentLineStart = 0;\n	var nextLineStart = 0;\n	var getNextLineStart = function(){\n		for(var i = currentLineStart+1; i < plyBufferUint8.byteLength; i++){\n			if(plyBufferUint8[i] === "\\n".charCodeAt(0)){\n				return i;\n			}\n		}\n		\n		return null;\n	};\n	\n	var linesRead = 0;\n	var targetOffset = 0;\n	var aabb = {\n		lx: Infinity,\n		ly: Infinity,\n		lz: Infinity,\n		ux: -Infinity,\n		uy: -Infinity,\n		uz: -Infinity\n	};\n	\n	while(nextLineStart < plyBuffer.byteLength && nextLineStart != null && targetOffset < pointDataView.byteLength ){\n		nextLineStart = getNextLineStart();\n		var line = String.fromCharCode.apply(this, plyBufferUint8.subarray(currentLineStart, nextLineStart));\n		var tokens = line.trim().split(" ");\n//		if(tokens.length !== plyPointAttributes.attributes.length){\n//			continue;\n//		}\n		\n		for(var j = 0; j < plyPointAttributes.attributes.length; j++){\n			var pointAttribute = plyPointAttributes.attributes[j];\n			\n			if(pointAttribute === PointAttribute.POSITION_CARTESIAN){\n				var x = parseFloat(tokens.shift());\n				var y = parseFloat(tokens.shift());\n				var z = parseFloat(tokens.shift());\n				pointDataView.setFloat32(targetOffset, x, true);\n				pointDataView.setFloat32(targetOffset+4, y, true);\n				pointDataView.setFloat32(targetOffset+8, z, true);\n				\n				if(!isNaN(x) && !isNaN(y) && !isNaN(z)){\n					aabb.lx = Math.min(aabb.lx, x);\n					aabb.ly = Math.min(aabb.ly, y);\n					aabb.lz = Math.min(aabb.lz, z);\n					aabb.ux = Math.max(aabb.ux, x);\n					aabb.uy = Math.max(aabb.uy, y);\n					aabb.uz = Math.max(aabb.uz, z);\n				}\n				\n				targetOffset += 12;\n			}else if(pointAttribute === PointAttribute.NORMAL_FLOATS){\n				var nx = parseFloat(tokens.shift());\n				var ny = parseFloat(tokens.shift());\n				var nz = parseFloat(tokens.shift());\n				pointDataView.setFloat32(targetOffset, nx, true);\n				pointDataView.setFloat32(targetOffset+4, ny, true);\n				pointDataView.setFloat32(targetOffset+8, nz, true);\n				\n				targetOffset += 12;\n			}else if(pointAttribute === PointAttribute.RGB_PACKED){\n				var r = parseInt(tokens.shift());\n				var g = parseInt(tokens.shift());\n				var b = parseInt(tokens.shift());\n				pointDataView.setUint8(targetOffset, r);\n				pointDataView.setUint8(targetOffset+1, g);\n				pointDataView.setUint8(targetOffset+2, b);\n				pointDataView.setUint8(targetOffset+3, 255);\n				\n				targetOffset += 4;\n			}else if(pointAttribute === PointAttribute.RGBA_PACKED){\n				var r = parseInt(tokens.shift());\n				var g = parseInt(tokens.shift());\n				var b = parseInt(tokens.shift());\n				var a = parseInt(tokens.shift());\n				pointDataView.setUint8(targetOffset, r);\n				pointDataView.setUint8(targetOffset+1, g);\n				pointDataView.setUint8(targetOffset+2, b);\n				pointDataView.setUint8(targetOffset+3, a);\n				targetOffset += 4;\n			}\n		}\n		\n		linesRead++;\n		if((linesRead % (1000)) === 0){\n			var message = {\n				"type": "progress",\n				"pointsLoaded": linesRead \n			};\n			postMessage(message);\n		}\n		\n		currentLineStart = nextLineStart;\n		\n//		if(linesRead >= 10000){\n//			break;\n//		}\n	}\n	\n	\n	var result = {\n			"type": "result",\n			"buffer": pointBuffer,\n			"pointAttributes": pointAttributes,\n			"aabb": aabb\n	};\n	postMessage(result);\n	\n};\n\nPlyBinaryWorker.loadFromBinary = function loadFromBinary(plyFile){\n	var littleEndian = true;\n	if(plyFile.header.type === PlyFileType.BINARY_LITTLE_ENDIAN){\n		littleEndian = true;\n	}else{\n		littleEndian = false;\n	}\n	\n//	postMessage({"type": "log", "message": ("binary:" + littleEndian)});\n	\n	var vertexElement = plyFile.header.elements[0];\n//	vertexElement.size = 10000;\n	var plyPointAttributes = PlyLoader.pointAttributesFromProperties(vertexElement.properties);\n	var pointAttributes = PlyLoader.pointAttributesFromProperties(vertexElement.properties, true);\n	var pointBuffer = new ArrayBuffer(pointAttributes.byteSize * vertexElement.size);\n	var pointDataView = new DataView(pointBuffer);\n	var plyDataView = new DataView(plyFile.buffer, plyFile.header.byteSize);\n	var aabb = {\n			lx: Infinity,\n			ly: Infinity,\n			lz: Infinity,\n			ux: -Infinity,\n			uy: -Infinity,\n			uz: -Infinity\n		};\n	\n	for(var i = 0; i < vertexElement.size; i++){\n		var targetOffset = i * pointAttributes.byteSize;\n		var plyOffset = i * plyPointAttributes.byteSize;\n		for(var j = 0; j < plyPointAttributes.attributes.length; j++){\n			var pointAttribute = plyPointAttributes.attributes[j];\n			\n			if(pointAttribute === PointAttribute.POSITION_CARTESIAN){\n				var x = plyDataView.getFloat32(plyOffset, littleEndian);\n				var y = plyDataView.getFloat32(plyOffset+4, littleEndian);\n				var z = plyDataView.getFloat32(plyOffset+8, littleEndian);\n				pointDataView.setFloat32(targetOffset, x, true);\n				pointDataView.setFloat32(targetOffset+4, y, true);\n				pointDataView.setFloat32(targetOffset+8, z, true);\n				\n				if(!isNaN(x) && !isNaN(y) && !isNaN(z)){\n					aabb.lx = Math.min(aabb.lx, x);\n					aabb.ly = Math.min(aabb.ly, y);\n					aabb.lz = Math.min(aabb.lz, z);\n					aabb.ux = Math.max(aabb.ux, x);\n					aabb.uy = Math.max(aabb.uy, y);\n					aabb.uz = Math.max(aabb.uz, z);\n				}\n				\n				targetOffset += 12;\n				plyOffset += 12;\n			}else if(pointAttribute === PointAttribute.NORMAL_FLOATS){\n				pointDataView.setFloat32(targetOffset, plyDataView.getFloat32(plyOffset, littleEndian), true);\n				pointDataView.setFloat32(targetOffset+4, plyDataView.getFloat32(plyOffset+4, littleEndian), true);\n				pointDataView.setFloat32(targetOffset+8, plyDataView.getFloat32(plyOffset+8, littleEndian), true);\n				targetOffset += 12;\n				plyOffset += 12;\n			}else if(pointAttribute === PointAttribute.RGB_PACKED){\n				pointDataView.setUint8(targetOffset, plyDataView.getUint8(plyOffset));\n				pointDataView.setUint8(targetOffset+1, plyDataView.getUint8(plyOffset+1));\n				pointDataView.setUint8(targetOffset+2, plyDataView.getUint8(plyOffset+2));\n				pointDataView.setUint8(targetOffset+3, 255);\n				targetOffset += 4;\n				plyOffset += 3;\n			}else if(pointAttribute === PointAttribute.RGBA_PACKED){\n				pointDataView.setUint8(targetOffset, plyDataView.getUint8(plyOffset));\n				pointDataView.setUint8(targetOffset+1, plyDataView.getUint8(plyOffset+1));\n				pointDataView.setUint8(targetOffset+2, plyDataView.getUint8(plyOffset+2));\n				pointDataView.setUint8(targetOffset+3, plyDataView.getUint8(plyOffset+3));\n				targetOffset += 4;\n				plyOffset += 4;\n			}else{\n				plyOffset += pointAttribute.byteSize;\n			}\n		}\n		if(i % (10*1000) === 0){\n			var message = {\n				"type": "progress",\n				"pointsLoaded": i \n			};\n			postMessage(message);\n		}\n	}\n	\n	var result = {\n			"type": "result",\n			"buffer": pointBuffer,\n			"pointAttributes": pointAttributes,\n			"aabb": aabb\n	};\n	postMessage(result);\n};\n\nPlyBinaryWorker.loadFromBuffer = function PlyLoader_loadFromBuffer(buffer){\n	var plyFile = new PlyFile(buffer);\n	var possibleHeader = String.fromCharCode.apply(null, new Uint8Array(buffer, 0, 5000));\n	var headerLength = possibleHeader.indexOf("end_header") + 11;\n	if(headerLength === 0){\n		throw "unable to read ply header";\n	}\n	\n	var strHeader = possibleHeader.substr(0, headerLength);\n	var plyHeader = PlyLoader.parseHeader(strHeader);\n	plyFile.header = plyHeader;\n	postMessage({\n		"type": "header",\n		"header": strHeader});\n	\n	if(plyFile.header.type === PlyFileType.ASCII){\n		PlyBinaryWorker.loadFromAscii(plyFile);\n	}else{\n		PlyBinaryWorker.loadFromBinary(plyFile);\n	}\n};\n'},Potree.singleSource=!0;
